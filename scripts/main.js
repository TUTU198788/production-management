// Êµ¶‰∏úÊú∫Âú∫T3Ê°ÅÊû∂Èí¢Á≠ãÁîü‰∫ßÊé®ËøõÁÆ°ÁêÜÁ≥ªÁªü - ‰∏ªË¶ÅJavaScriptÊñá‰ª∂
// 16:9Â±èÂπï‰ºòÂåñÁâàÊú¨

class SteelProductionDashboard {
    constructor() {
        this.data = {
            totalDemand: 0,
            produced: 0,
            pending: 0,
            efficiency: 2847,
            completionRate: 0,
            lastUpdate: new Date()
        };

        this.charts = {};
        this.refreshInterval = null;
        this.init();
    }
    
    init() {
        this.setupEventListeners();

        // Âª∂ËøüÂàùÂßãÂåñÔºåÁ°Æ‰øùDataManagerÂÆåÂÖ®Âä†ËΩΩ
        setTimeout(() => {
            this.updateMetricsFromDataManager();
            this.updateLastUpdateTime();
        }, 200);

        this.startAutoRefresh();

        // Âª∂ËøüÂä†ËΩΩÂõæË°®ÔºåÁ°Æ‰øùDOMÂÆåÂÖ®Âä†ËΩΩ
        setTimeout(() => {
            this.initializeCharts();
        }, 300);

        // ÂÆöÊúüÊ£ÄÊü•Êï∞ÊçÆÁä∂ÊÄÅÔºåÁ°Æ‰øùÊï∞ÊçÆÂêåÊ≠•
        this.startDataCheck();
    }

    // ‰ªéÊï∞ÊçÆÁÆ°ÁêÜÂô®Ëé∑ÂèñÂÆûÊó∂Êï∞ÊçÆ
    updateMetricsFromDataManager() {
        console.log('=== Êï∞ÊçÆÊ∫êÊ£ÄÊü• ===');
        console.log('window.dataManager Â≠òÂú®:', !!window.dataManager);

        if (!window.dataManager) {
            console.error('‚ùå window.dataManager ‰∏çÂ≠òÂú®ÔºÅ');

            // Â∞ùËØïÁ¥ßÊÄ•‰øÆÂ§ç
            console.log('Â∞ùËØïÁ¥ßÊÄ•‰øÆÂ§çDataManager...');
            try {
                if (typeof DataManager !== 'undefined') {
                    window.dataManager = new DataManager();
                    console.log('‚úÖ Á¥ßÊÄ•‰øÆÂ§çÊàêÂäüÔºÅÊï∞ÊçÆÊù°Êï∞:', window.dataManager.data.length);

                    // Â¶ÇÊûúÊï∞ÊçÆ‰∏∫Á©∫ÔºåÈáçÊñ∞Âä†ËΩΩ
                    if (window.dataManager.data.length === 0) {
                        window.dataManager.loadFromLocalStorage();
                        console.log('ÈáçÊñ∞Âä†ËΩΩÂêéÊï∞ÊçÆÊù°Êï∞:', window.dataManager.data.length);
                    }
                } else {
                    console.error('‚ùå DataManagerÁ±ª‰∏çÂ≠òÂú®');
                    return;
                }
            } catch (error) {
                console.error('‚ùå Á¥ßÊÄ•‰øÆÂ§çÂ§±Ë¥•:', error);
                return;
            }
        }

        console.log('dataManager.data Â≠òÂú®:', !!window.dataManager.data);
        console.log('dataManager.data Á±ªÂûã:', typeof window.dataManager.data);
        console.log('dataManager.data ÈïøÂ∫¶:', window.dataManager.data ? window.dataManager.data.length : 'undefined');

        // Ê£ÄÊü•Êú¨Âú∞Â≠òÂÇ®
        const localStorageData = localStorage.getItem('productionData');
        console.log('Êú¨Âú∞Â≠òÂÇ®Êï∞ÊçÆÂ≠òÂú®:', !!localStorageData);
        if (localStorageData) {
            try {
                const parsed = JSON.parse(localStorageData);
                console.log('Êú¨Âú∞Â≠òÂÇ®Êï∞ÊçÆÊù°Êï∞:', parsed.length);
                console.log('Êú¨Âú∞Â≠òÂÇ®Ââç3Êù°Êï∞ÊçÆ:', parsed.slice(0, 3));
            } catch (e) {
                console.error('Êú¨Âú∞Â≠òÂÇ®Êï∞ÊçÆËß£ÊûêÂ§±Ë¥•:', e);
            }
        }

        // Ê£ÄÊü•Ë°®Ê†º‰∏≠ÂÆûÈôÖÊòæÁ§∫ÁöÑÊï∞ÊçÆ
        const tableRows = document.querySelectorAll('#dataTable tbody tr:not(.no-data)');
        console.log('Ë°®Ê†ºÊòæÁ§∫Ë°åÊï∞:', tableRows.length);

        if (tableRows.length > 0) {
            console.log('Ë°®Ê†ºÂâç3Ë°åÊï∞ÊçÆ:');
            for (let i = 0; i < Math.min(3, tableRows.length); i++) {
                const row = tableRows[i];
                const cells = row.querySelectorAll('td');
                if (cells.length >= 4) {
                    console.log(`Ë°®Ê†ºÁ¨¨${i+1}Ë°å: ${cells[1].textContent.trim()} (${cells[2].textContent.trim()}) - ËÆ°Âàí${cells[3].textContent.trim()}Ê†π`);
                }
            }
        }

        if (window.dataManager && window.dataManager.data) {
            const data = window.dataManager.data;

            console.log('=== dataManager.data ÂÜÖÂÆπÊ£ÄÊü• ===');
            console.log('Êï∞ÊçÆÊù°Êï∞:', data.length);

            if (data.length === 0) {
                console.log('‚ùå dataManager.data ‰∏∫Á©∫ÔºÅ');
                // Â∞ùËØïÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
                console.log('Â∞ùËØïÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ...');
                window.dataManager.loadFromLocalStorage();
                console.log('ÈáçÊñ∞Âä†ËΩΩÂêéÊï∞ÊçÆÊù°Êï∞:', window.dataManager.data.length);

                if (window.dataManager.data.length === 0) {
                    console.log('‚ö†Ô∏è Êï∞ÊçÆ‰ªç‰∏∫Á©∫ÔºåÊòæÁ§∫Á©∫Áä∂ÊÄÅ');
                    this.data = {
                        totalDemandMeters: 0,
                        producedMeters: 0,
                        shippedMeters: 0,
                        pendingMeters: 0,
                        unshippedMeters: 0,
                        totalDemand: 0,
                        produced: 0,
                        pending: 0,
                        completionRate: 0,
                        materialTons: 0,
                        inventoryStatus: { status: 'Êó†Êï∞ÊçÆ', color: '#6b7280' },
                        efficiency: 0
                    };
                    this.updateMetrics();
                    return;
                } else {
                    console.log('‚úÖ ÈáçÊñ∞Âä†ËΩΩÊàêÂäüÔºåÁªßÁª≠Â§ÑÁêÜÊï∞ÊçÆ');
                    // ÈáçÊñ∞Ëé∑ÂèñÊï∞ÊçÆÂºïÁî®ÔºåÁªßÁª≠Â§ÑÁêÜ
                    const reloadedData = window.dataManager.data;
                    this.processDataAndCalculate(reloadedData);
                    return;
                }
            }

            this.processDataAndCalculate(data);
        }

        this.updateMetrics();

        // === Ëá™Âä®Ë°•‰∏ÅÔºö‰∏ªÁïåÈù¢Êï∞ÊçÆÂêåÊ≠•Âà∞Êú¨Âú∞Â≠òÂÇ® ===
        try {
            if (this.data) {
                localStorage.setItem('productionData', JSON.stringify(this.data.rawData || window.dataManager.data || []));
                console.log('‚úÖ Â∑≤Ëá™Âä®ÂêåÊ≠•‰∏ªÁïåÈù¢Êï∞ÊçÆÂà∞Êú¨Âú∞Â≠òÂÇ® productionData');
            }
        } catch (e) {
            console.error('ÂêåÊ≠•‰∏ªÁïåÈù¢Êï∞ÊçÆÂà∞Êú¨Âú∞Â≠òÂÇ®Â§±Ë¥•:', e);
        }
    }

    // Â§ÑÁêÜÊï∞ÊçÆÂπ∂ËÆ°ÁÆóÁªüËÆ°‰ø°ÊÅØ
    processDataAndCalculate(data) {
        console.log('üîÑ processDataAndCalculate Ë¢´Ë∞ÉÁî®ÔºåÊï∞ÊçÆÊù°Êï∞:', data.length);

        if (!data || data.length === 0) {
            console.warn('‚ö†Ô∏è Êï∞ÊçÆ‰∏∫Á©∫ÔºåÊó†Ê≥ïËÆ°ÁÆóÁªüËÆ°');
            this.data.totalDemandMeters = 0;
            this.data.producedMeters = 0;
            this.data.pendingMeters = 0;
            this.data.shippedMeters = 0;
            return;
        }

        console.log('üìä Êï∞ÊçÆÊ†∑Êú¨ (Ââç3Êù°):');
        data.slice(0, 3).forEach((item, index) => {
            console.log(`Á¨¨${index + 1}Êù°:`, {
                spec: item.spec,
                area: item.area,
                planned: item.planned,
                produced: item.produced,
                shipped: item.shipped || 0
            });
        });

        console.log('=== üßÆ ÂºÄÂßãËÆ°ÁÆóÁªüËÆ°Êï∞ÊçÆ ===');
        let totalCheck = 0;
        let validRecords = 0;
        let invalidRecords = 0;

        // ËÆ°ÁÆóÊÄªÁ±≥Êï∞ÔºàÊ†πÊï∞ √ó ÈïøÂ∫¶Ôºâ
        this.data.totalDemandMeters = data.reduce((sum, item, index) => {
            const length = this.extractLengthFromSpec(item.spec); // ÊèêÂèñÈïøÂ∫¶ÔºàmmÔºâ
            const planned = item.planned || 0;
            const meters = planned * length / 1000; // ËΩ¨Êç¢‰∏∫Á±≥

            if (length > 0 && planned > 0) {
                validRecords++;
                totalCheck += meters;

                if (index < 5) { // Âè™ÊòæÁ§∫Ââç5Êù°ÁöÑËØ¶ÁªÜËÆ°ÁÆó
                    console.log(`‚úÖ Á¨¨${index + 1}Êù°: ${item.spec} (${item.area})`);
                    console.log(`   ËÆ°ÁÆó: ${planned}Ê†π √ó ${length}mm √∑ 1000 = ${meters.toFixed(1)}Á±≥`);
                }
            } else {
                invalidRecords++;
                if (index < 5) {
                    console.log(`‚ùå Á¨¨${index + 1}Êù°Êó†Êïà: ${item.spec}, ÈïøÂ∫¶=${length}, ËÆ°Âàí=${planned}`);
                }
            }

            return sum + meters;
        }, 0);

        console.log(`üìà ÊÄªÈúÄÊ±ÇÈáèËÆ°ÁÆóÂÆåÊàê:`);
        console.log(`   ÊúâÊïàËÆ∞ÂΩï: ${validRecords} Êù°`);
        console.log(`   Êó†ÊïàËÆ∞ÂΩï: ${invalidRecords} Êù°`);
        console.log(`   ÊúÄÁªàÊÄªÈúÄÊ±ÇÈáè: ${this.data.totalDemandMeters.toFixed(1)}Á±≥`);
        console.log(`   È™åËØÅËÆ°ÁÆó: ${totalCheck.toFixed(1)}Á±≥`);

        // ËÆ°ÁÆóÂ∑≤Áîü‰∫ßÈáèÔºàÁ±≥Ôºâ
        let producedValidRecords = 0;
        this.data.producedMeters = data.reduce((sum, item) => {
            const length = this.extractLengthFromSpec(item.spec);
            const produced = item.produced || 0;
            const meters = produced * length / 1000;

            if (produced > 0) {
                producedValidRecords++;
                if (producedValidRecords <= 3) { // Âè™ÊòæÁ§∫Ââç3Êù°
                    console.log(`‚úÖ Â∑≤Áîü‰∫ß ${item.spec}: ${produced}Ê†π √ó ${length}mm = ${meters.toFixed(1)}Á±≥`);
                }
            }
            return sum + meters;
        }, 0);

        // ËÆ°ÁÆóÂ∑≤ÂèëË¥ßÈáèÔºàÁ±≥Ôºâ
        let shippedValidRecords = 0;
        this.data.shippedMeters = data.reduce((sum, item) => {
            const length = this.extractLengthFromSpec(item.spec);
            const shipped = item.shipped || 0;
            const meters = shipped * length / 1000;

            if (shipped > 0) {
                shippedValidRecords++;
                if (shippedValidRecords <= 3) { // Âè™ÊòæÁ§∫Ââç3Êù°
                    console.log(`‚úÖ Â∑≤ÂèëË¥ß ${item.spec}: ${shipped}Ê†π √ó ${length}mm = ${meters.toFixed(1)}Á±≥`);
                }
            }
            return sum + meters;
        }, 0);

        console.log(`üìä Áîü‰∫ßÁªüËÆ°:`);
        console.log(`   Â∑≤Áîü‰∫ßËÆ∞ÂΩï: ${producedValidRecords} Êù°`);
        console.log(`   Â∑≤Áîü‰∫ßÊÄªÈáè: ${this.data.producedMeters.toFixed(1)}Á±≥`);
        console.log(`üì¶ ÂèëË¥ßÁªüËÆ°:`);
        console.log(`   Â∑≤ÂèëË¥ßËÆ∞ÂΩï: ${shippedValidRecords} Êù°`);
        console.log(`   Â∑≤ÂèëË¥ßÊÄªÈáè: ${this.data.shippedMeters.toFixed(1)}Á±≥`);

        this.data.pendingMeters = this.data.totalDemandMeters - this.data.producedMeters;
        this.data.unshippedMeters = this.data.producedMeters - this.data.shippedMeters;

        // ËÆ°ÁÆóÂéüÊùêÊñôÂÆûÈôÖÈááË¥≠ÈáèÔºàÂê®Ôºâ
        this.data.materialTons = this.calculateActualMaterialPurchased();

        // ËÆ°ÁÆóÂ∫ìÂ≠òÁä∂ÊÄÅ
        this.data.inventoryStatus = this.calculateInventoryStatus(this.data.unshippedMeters);

        // ‰øùÁïôÂéüÊúâÁöÑÊ†πÊï∞ËÆ°ÁÆóÔºàÁî®‰∫éÂÆåÊàêÁéáËÆ°ÁÆóÔºâ
        this.data.totalDemand = data.reduce((sum, item) => sum + item.planned, 0);
        this.data.produced = data.reduce((sum, item) => sum + item.produced, 0);
        this.data.pending = this.data.totalDemand - this.data.produced;
        this.data.completionRate = this.data.totalDemandMeters > 0 ?
            ((this.data.producedMeters / this.data.totalDemandMeters) * 100).toFixed(1) : 0;

        // ËÆ°ÁÆóÁîü‰∫ßÊïàÁéáÔºàÊ†π/Â§©Ôºâ
        this.data.efficiency = this.calculateProductionEfficiency(data);

        console.log('ËÆ°ÁÆóÁªìÊûúÊ±áÊÄª:');
        console.log('ÊÄªÈúÄÊ±ÇÈáè:', this.data.totalDemandMeters.toFixed(1), 'Á±≥');
        console.log('Â∑≤Áîü‰∫ßÈáè:', this.data.producedMeters.toFixed(1), 'Á±≥');
        console.log('ÂæÖÁîü‰∫ßÈáè:', this.data.pendingMeters.toFixed(1), 'Á±≥');
        console.log('Â∑≤ÂèëË¥ßÈáè:', this.data.shippedMeters.toFixed(1), 'Á±≥');
        console.log('Êú™ÂèëË¥ßÈáè:', this.data.unshippedMeters.toFixed(1), 'Á±≥');
    }

    // ËÆ°ÁÆóÂÆûÈôÖÂéüÊùêÊñôÈááË¥≠Èáè
    calculateActualMaterialPurchased() {
        if (window.dataManager && window.dataManager.materialPurchases) {
            return window.dataManager.materialPurchases.reduce((sum, purchase) => {
                return sum + purchase.quantity;
            }, 0);
        }
        return 0;
    }

    // ËÆ°ÁÆóÂ∫ìÂ≠òÁä∂ÊÄÅ
    calculateInventoryStatus(unshippedMeters) {
        if (unshippedMeters < 1000) {
            return { status: 'ÂÅè‰Ωé', color: '#ef4444' };
        } else if (unshippedMeters < 5000) {
            return { status: 'Ê≠£Â∏∏', color: '#10b981' };
        } else if (unshippedMeters < 10000) {
            return { status: 'ÂÖÖË∂≥', color: '#3b82f6' };
        } else {
            return { status: 'ËøáÂ§ö', color: '#f59e0b' };
        }
    }

    // ‰ªéËßÑÊ†ºÂûãÂè∑‰∏≠ÊèêÂèñÈïøÂ∫¶ÔºàmmÔºâ- Â¢ûÂº∫ÁâàÊú¨
    extractLengthFromSpec(spec) {
        if (!spec) {
            console.warn('ËßÑÊ†º‰∏∫Á©∫Ôºå‰ΩøÁî®ÈªòËÆ§ÈïøÂ∫¶6000mm');
            return 6000;
        }

        console.log(`Ëß£ÊûêËßÑÊ†º: "${spec}"`);

        // Â§öÁßçÈïøÂ∫¶Ê†ºÂºèÁöÑÂåπÈÖçÊ®°Âºè
        const patterns = [
            /L=(\d+)/,           // L=6000
            /ÈïøÂ∫¶[Ôºö:]\s*(\d+)/,   // ÈïøÂ∫¶Ôºö6000 Êàñ ÈïøÂ∫¶:6000
            /(\d+)mm/i,          // 6000mm Êàñ 6000MM
            /(\d+)MM/,           // 6000MM
            /L(\d+)/,            // L6000
            /-(\d+)$/,           // ËßÑÊ†º-6000
            /√ó(\d+)/,            // ËßÑÊ†º√ó6000
            /\*(\d+)/,           // ËßÑÊ†º*6000
            /(\d{4,})/           // Áõ¥Êé•ÁöÑ4‰Ωç‰ª•‰∏äÊï∞Â≠óÔºàÂ¶Ç6000Ôºâ
        ];

        for (let i = 0; i < patterns.length; i++) {
            const pattern = patterns[i];
            const match = spec.match(pattern);
            if (match) {
                const length = parseInt(match[1]);
                // È™åËØÅÈïøÂ∫¶ÊòØÂê¶Âú®ÂêàÁêÜËåÉÂõ¥ÂÜÖÔºà1Á±≥Âà∞20Á±≥Ôºâ
                if (length >= 1000 && length <= 20000) {
                    console.log(`‚úÖ ÊàêÂäüËß£ÊûêÈïøÂ∫¶: ${length}mm (‰ΩøÁî®Ê®°Âºè${i + 1})`);
                    return length;
                } else {
                    console.warn(`‚ö†Ô∏è ÈïøÂ∫¶Ë∂ÖÂá∫ÂêàÁêÜËåÉÂõ¥: ${length}mm`);
                }
            }
        }

        // Â¶ÇÊûúÈÉΩÊ≤°ÊúâÂåπÈÖçÂà∞Ôºå‰ΩøÁî®ÈªòËÆ§ÈïøÂ∫¶
        console.warn(`‚ö†Ô∏è Êó†Ê≥ïËß£ÊûêËßÑÊ†º"${spec}"‰∏≠ÁöÑÈïøÂ∫¶Ôºå‰ΩøÁî®ÈªòËÆ§ÈïøÂ∫¶6000mm`);
        return 6000;
    }

    // ËÆ°ÁÆóÁîü‰∫ßÊïàÁéá
    calculateProductionEfficiency(data) {
        if (!data || data.length === 0) return 0;

        // ËÆ°ÁÆóÊÄªÂ∑≤Áîü‰∫ßÊï∞Èáè
        const totalProduced = data.reduce((sum, item) => sum + item.produced, 0);

        if (totalProduced === 0) return 0;

        // ÂÅáËÆæÁîü‰∫ßÂë®Êúü‰∏∫30Â§©ÔºàÂèØ‰ª•Ê†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥Ôºâ
        const productionDays = 30;
        const efficiency = Math.round(totalProduced / productionDays);

        return efficiency;
    }
    
    setupEventListeners() {
        // Âà∑Êñ∞ÊåâÈíÆ
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => this.refreshData());
        }

        // Êï∞ÊçÆ‰øùÊä§ÈÖçÁΩÆÊåâÈíÆ
        const dataProtectionBtn = document.getElementById('dataProtectionBtn');
        if (dataProtectionBtn) {
            dataProtectionBtn.addEventListener('click', () => this.openDataProtectionConfig());
        }

        // ÂêåÊ≠•‰øÆÂ§çÊåâÈíÆ
        const syncFixBtn = document.getElementById('syncFixBtn');
        if (syncFixBtn) {
            syncFixBtn.addEventListener('click', () => this.quickSyncFix());
        }

        // Ë∞ÉËØïÊåâÈíÆ
        const debugBtn = document.getElementById('debugBtn');
        if (debugBtn) {
            debugBtn.addEventListener('click', () => this.openDebugTool());
        }

        // Á≠õÈÄâÂô®‰∫ã‰ª∂
        this.setupFilters();

        // ÂõæË°®Êìç‰ΩúÊåâÈíÆ
        this.setupChartActions();

        // Á™óÂè£Â§ßÂ∞èÂèòÂåñÊó∂ÈáçÊñ∞Ë∞ÉÊï¥ÂõæË°®
        window.addEventListener('resize', this.debounce(() => {
            this.resizeCharts();
        }, 300));
    }

    // ÊâìÂºÄÊï∞ÊçÆ‰øùÊä§ÈÖçÁΩÆÁïåÈù¢
    openDataProtectionConfig() {
        if (window.dataProtectionUtils && window.dataProtectionUtils.createConfigInterface) {
            window.dataProtectionUtils.createConfigInterface();
        } else {
            this.showNotification('Êï∞ÊçÆ‰øùÊä§ÈÖçÁΩÆÊ®°ÂùóÊú™Âä†ËΩΩ', 'error');
        }
    }

    // ÊâìÂºÄË∞ÉËØïÂ∑•ÂÖ∑
    openDebugTool() {
        console.log('üîç ÊâìÂºÄË∞ÉËØïÂ∑•ÂÖ∑...');

        // ÂÖàÊâßË°å‰∏ÄÊ¨°Âº∫Âà∂ËÆ°ÁÆóÂπ∂ÊòæÁ§∫ËØ¶ÁªÜÊó•Âøó
        console.log('=== üöÄ ÂºÄÂßãË∞ÉËØïÁªüËÆ°ËÆ°ÁÆó ===');

        if (!window.dataManager) {
            console.error('‚ùå DataManager‰∏çÂ≠òÂú®');
            this.showNotification('DataManagerÊú™Âä†ËΩΩÔºåÊó†Ê≥ïË∞ÉËØï', 'error');
            return;
        }

        const data = window.dataManager.data || [];
        console.log(`üìä Êï∞ÊçÆÁä∂ÊÄÅ: ${data.length} Êù°ËÆ∞ÂΩï`);

        if (data.length === 0) {
            console.warn('‚ö†Ô∏è Êï∞ÊçÆ‰∏∫Á©∫');
            this.showNotification('Êï∞ÊçÆ‰∏∫Á©∫ÔºåËØ∑ÂÖàÂä†ËΩΩÊï∞ÊçÆ', 'warning');
            return;
        }

        // ÊòæÁ§∫ÂâçÂá†Êù°Êï∞ÊçÆÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
        console.log('üìã Êï∞ÊçÆÊ†∑Êú¨:');
        data.slice(0, 5).forEach((item, index) => {
            const length = this.extractLengthFromSpec(item.spec);
            console.log(`Á¨¨${index + 1}Êù°:`, {
                spec: item.spec,
                area: item.area,
                planned: item.planned,
                produced: item.produced,
                shipped: item.shipped || 0,
                extractedLength: length
            });
        });

        // Âº∫Âà∂ÈáçÊñ∞ËÆ°ÁÆó
        console.log('üîÑ Âº∫Âà∂ÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°...');
        this.updateMetricsFromDataManager();

        // ÊòæÁ§∫ËÆ°ÁÆóÁªìÊûú
        setTimeout(() => {
            console.log('üìà ËÆ°ÁÆóÁªìÊûú:');
            console.log('ÊÄªÈúÄÊ±ÇÈáè:', this.data.totalDemandMeters?.toFixed(1) || 0, 'Á±≥');
            console.log('Â∑≤Áîü‰∫ßÈáè:', this.data.producedMeters?.toFixed(1) || 0, 'Á±≥');
            console.log('ÂæÖÁîü‰∫ßÈáè:', this.data.pendingMeters?.toFixed(1) || 0, 'Á±≥');
            console.log('Â∑≤ÂèëË¥ßÈáè:', this.data.shippedMeters?.toFixed(1) || 0, 'Á±≥');

            // ÊâìÂºÄË∞ÉËØïÈ°µÈù¢
            window.open('debug-stats.html', '_blank');
            this.showNotification('Ë∞ÉËØï‰ø°ÊÅØÂ∑≤ËæìÂá∫Âà∞ÊéßÂà∂Âè∞ÔºåË∞ÉËØïÈ°µÈù¢Â∑≤ÊâìÂºÄ', 'info');
        }, 1000);
    }

    // Âø´ÈÄüÂêåÊ≠•‰øÆÂ§çÔºàÂ¢ûÂº∫ÁâàÊú¨Ôºâ
    quickSyncFix() {
        console.log('üîß ÊâßË°åÂø´ÈÄüÂêåÊ≠•‰øÆÂ§ç...');
        this.showNotification('Ê≠£Âú®‰øÆÂ§çÊï∞ÊçÆÂêåÊ≠•ÈóÆÈ¢ò...', 'info');

        // Ê£ÄÊü•ÂΩìÂâçÁä∂ÊÄÅ
        const dataLength = window.dataManager?.data?.length || 0;
        const currentMetrics = this.data.totalDemandMeters || 0;

        console.log('‰øÆÂ§çÂâçÁä∂ÊÄÅ:', {
            dataLength,
            currentMetrics,
            hasDataManager: !!window.dataManager,
            hasDashboard: !!window.dashboard
        });

        if (dataLength === 0) {
            // Â¶ÇÊûúÊ≤°ÊúâÊï∞ÊçÆÔºåÂ∞ùËØïÈáçÊñ∞Âä†ËΩΩ
            console.log('üì• Ê≤°ÊúâÊï∞ÊçÆÔºåÂ∞ùËØïÈáçÊñ∞Âä†ËΩΩ...');
            if (window.dataManager) {
                window.dataManager.loadFromLocalStorage();
                setTimeout(() => {
                    this.quickSyncFix(); // ÈÄíÂΩíË∞ÉÁî®
                }, 1000);
                return;
            } else {
                this.showNotification('DataManagerÊú™Âä†ËΩΩÔºåËØ∑Âà∑Êñ∞È°µÈù¢', 'error');
                return;
            }
        }

        if (dataLength > 0 && currentMetrics === 0) {
            // ÊúâÊï∞ÊçÆ‰ΩÜÁªüËÆ°‰∏∫0ÔºåÊâßË°å‰øÆÂ§ç
            console.log('üîÑ ÊúâÊï∞ÊçÆ‰ΩÜÁªüËÆ°‰∏∫0ÔºåÊâßË°å‰øÆÂ§ç...');

            // ÂÖàÊ£ÄÊü•Êï∞ÊçÆÊ†ºÂºè
            this.diagnoseDataFormat();

            // Ê≠•È™§1ÔºöÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°
            console.log('üßÆ ÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°...');
            this.updateMetricsFromDataManager();

            // Ê≠•È™§2ÔºöÂª∂ËøüÊ£ÄÊü•ÁªìÊûú
            setTimeout(() => {
                const newMetrics = this.data.totalDemandMeters || 0;
                console.log(`ËÆ°ÁÆóÁªìÊûú: ${newMetrics.toFixed(1)}Á±≥`);

                if (newMetrics > 0) {
                    console.log('‚úÖ Âø´ÈÄü‰øÆÂ§çÊàêÂäü');
                    this.showNotification(`‰øÆÂ§çÊàêÂäüÔºÅÊÄªÈúÄÊ±ÇÈáè: ${newMetrics.toFixed(1)}Á±≥`, 'success');
                    this.updateMetrics(); // Êõ¥Êñ∞ÁïåÈù¢ÊòæÁ§∫
                } else {
                    console.log('‚ö†Ô∏è Âø´ÈÄü‰øÆÂ§çÂ§±Ë¥•ÔºåÂ∞ùËØïÊ∑±Â∫¶‰øÆÂ§ç...');
                    this.deepSyncFix();
                }
            }, 1500);
        } else if (dataLength > 0 && currentMetrics > 0) {
            // Êï∞ÊçÆÁä∂ÊÄÅÊ≠£Â∏∏
            console.log('‚úÖ Êï∞ÊçÆÁä∂ÊÄÅÊ≠£Â∏∏ÔºåÊó†ÈúÄ‰øÆÂ§ç');
            this.showNotification(`Êï∞ÊçÆÁä∂ÊÄÅÊ≠£Â∏∏ÔºåÊÄªÈúÄÊ±ÇÈáè: ${currentMetrics.toFixed(1)}Á±≥`, 'success');
        } else {
            // ÂÖ∂‰ªñÂºÇÂ∏∏ÊÉÖÂÜµ
            console.log('‚ùì Êú™Áü•Áä∂ÊÄÅÔºåÊâßË°åÂÆåÊï¥ËØäÊñ≠...');
            this.showNotification('ÊâßË°åÂÆåÊï¥ËØäÊñ≠...', 'warning');
            this.deepSyncFix();
        }
    }

    // ËØäÊñ≠Êï∞ÊçÆÊ†ºÂºè
    diagnoseDataFormat() {
        if (!window.dataManager || !window.dataManager.data) {
            console.log('‚ùå Êó†Ê≥ïËØäÊñ≠ÔºöDataManagerÊàñÊï∞ÊçÆ‰∏çÂ≠òÂú®');
            return;
        }

        const data = window.dataManager.data;
        console.log('üîç ËØäÊñ≠Êï∞ÊçÆÊ†ºÂºè...');
        console.log(`Êï∞ÊçÆÊÄªÊï∞: ${data.length} Êù°`);

        if (data.length === 0) {
            console.log('‚ö†Ô∏è Êï∞ÊçÆ‰∏∫Á©∫');
            return;
        }

        // Ê£ÄÊü•ÂâçÂá†Êù°Êï∞ÊçÆÁöÑÊ†ºÂºè
        const sampleSize = Math.min(5, data.length);
        console.log(`Ê£ÄÊü•Ââç ${sampleSize} Êù°Êï∞ÊçÆ:`);

        for (let i = 0; i < sampleSize; i++) {
            const item = data[i];
            const length = this.extractLengthFromSpec(item.spec);
            console.log(`Á¨¨${i + 1}Êù°:`, {
                spec: item.spec,
                area: item.area,
                planned: item.planned,
                produced: item.produced,
                shipped: item.shipped || 0,
                extractedLength: length
            });
        }

        // ÁªüËÆ°ÊúâÊïàÊï∞ÊçÆ
        let validCount = 0;
        let totalPlanned = 0;

        data.forEach(item => {
            const length = this.extractLengthFromSpec(item.spec);
            const planned = item.planned || 0;

            if (length > 0 && planned > 0) {
                validCount++;
                totalPlanned += planned;
            }
        });

        console.log(`üìä Êï∞ÊçÆÁªüËÆ°:`);
        console.log(`  ÊúâÊïàËÆ∞ÂΩï: ${validCount} / ${data.length}`);
        console.log(`  ÊÄªËÆ°ÂàíÈáè: ${totalPlanned} Ê†π`);

        if (validCount === 0) {
            console.log('‚ùå Ê≤°ÊúâÊúâÊïàÁöÑÊï∞ÊçÆËÆ∞ÂΩïÔºÅ');
            this.showNotification('Êï∞ÊçÆÊ†ºÂºèÂºÇÂ∏∏ÔºåÊ≤°ÊúâÊúâÊïàËÆ∞ÂΩï', 'error');
        } else if (validCount < data.length * 0.5) {
            console.log('‚ö†Ô∏è ÊúâÊïàÊï∞ÊçÆÊØî‰æãËæÉ‰Ωé');
            this.showNotification(`ÊúâÊïàÊï∞ÊçÆ: ${validCount}/${data.length}`, 'warning');
        } else {
            console.log('‚úÖ Êï∞ÊçÆÊ†ºÂºèÊ≠£Â∏∏');
        }
    }

    // Ê∑±Â∫¶ÂêåÊ≠•‰øÆÂ§çÔºàÂ¢ûÂº∫ÁâàÊú¨Ôºâ
    deepSyncFix() {
        console.log('üîß ÊâßË°åÊ∑±Â∫¶ÂêåÊ≠•‰øÆÂ§ç...');
        this.showNotification('ÊâßË°åÊ∑±Â∫¶‰øÆÂ§ç...', 'warning');

        // Ê≠•È™§1ÔºöÂÆåÂÖ®ÈáçÁΩÆÊï∞ÊçÆÁä∂ÊÄÅ
        console.log('üîÑ ÈáçÁΩÆÊï∞ÊçÆÁä∂ÊÄÅ...');
        this.data = {
            totalDemandMeters: 0,
            producedMeters: 0,
            pendingMeters: 0,
            shippedMeters: 0,
            unshippedMeters: 0,
            materialTons: 0,
            completionRate: 0,
            totalDemand: 0,
            produced: 0,
            pending: 0,
            efficiency: 0
        };

        // Ê≠•È™§2ÔºöÂº∫Âà∂ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
        if (window.dataManager) {
            console.log('üì• Âº∫Âà∂ÈáçÊñ∞Âä†ËΩΩÊú¨Âú∞Êï∞ÊçÆ...');
            window.dataManager.loadFromLocalStorage();

            // È™åËØÅÊï∞ÊçÆÂä†ËΩΩ
            setTimeout(() => {
                const loadedData = window.dataManager.data || [];
                console.log(`Êï∞ÊçÆÈáçÊñ∞Âä†ËΩΩÂÆåÊàê: ${loadedData.length} Êù°ËÆ∞ÂΩï`);

                if (loadedData.length === 0) {
                    console.log('‚ùå ÈáçÊñ∞Âä†ËΩΩÂêéÊï∞ÊçÆ‰ªç‰∏∫Á©∫');
                    this.showNotification('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êú¨Âú∞Â≠òÂÇ®', 'error');
                    return;
                }

                // Ê≠•È™§3Ôºö‰ΩøÁî®Âº∫ÂåñÁöÑËÆ°ÁÆóÈÄªËæë
                console.log('üßÆ ‰ΩøÁî®Âº∫ÂåñËÆ°ÁÆóÈÄªËæë...');
                this.forceRecalculateWithEnhancedLogic(loadedData);

                // Ê≠•È™§4ÔºöÂº∫Âà∂Êõ¥Êñ∞ÁïåÈù¢
                setTimeout(() => {
                    console.log('üé® Âº∫Âà∂Êõ¥Êñ∞ÁïåÈù¢...');
                    this.updateMetrics();
                    this.updateCharts();

                    // Ê≠•È™§5ÔºöÊúÄÁªàÈ™åËØÅ
                    setTimeout(() => {
                        const finalMetrics = this.data.totalDemandMeters || 0;
                        const dataLength = window.dataManager?.data?.length || 0;

                        console.log('‰øÆÂ§çÂêéÁä∂ÊÄÅ:', {
                            dataLength,
                            finalMetrics,
                            producedMeters: this.data.producedMeters || 0,
                            pendingMeters: this.data.pendingMeters || 0
                        });

                        if (dataLength > 0 && finalMetrics > 0) {
                            console.log('‚úÖ Ê∑±Â∫¶‰øÆÂ§çÊàêÂäü');
                            this.showNotification(`Ê∑±Â∫¶‰øÆÂ§çÊàêÂäüÔºÅÊÄªÈúÄÊ±ÇÈáè: ${finalMetrics.toFixed(1)}Á±≥`, 'success');
                        } else {
                            console.log('‚ùå Ê∑±Â∫¶‰øÆÂ§çÂ§±Ë¥•');
                            this.showNotification('‰øÆÂ§çÂ§±Ë¥•ÔºåÂèØËÉΩÂ≠òÂú®Êï∞ÊçÆÊ†ºÂºèÈóÆÈ¢ò', 'error');

                            // Êèê‰æõËØ¶ÁªÜËØäÊñ≠
                            setTimeout(() => {
                                if (confirm('‰øÆÂ§çÂ§±Ë¥•ÔºåÊòØÂê¶ÊâìÂºÄÊï∞ÊçÆÊ£ÄÊü•Â∑•ÂÖ∑ËøõË°åËØ¶ÁªÜËØäÊñ≠Ôºü')) {
                                    window.open('check-data.html', '_blank');
                                }
                            }, 2000);
                        }
                    }, 1000);
                }, 500);
            }, 1000);
        } else {
            console.log('‚ùå DataManager‰∏çÂ≠òÂú®');
            this.showNotification('DataManagerÊú™Âä†ËΩΩÔºåËØ∑Âà∑Êñ∞È°µÈù¢', 'error');
        }
    }

    // Âº∫ÂåñÁöÑÈáçÊñ∞ËÆ°ÁÆóÈÄªËæë
    forceRecalculateWithEnhancedLogic(data) {
        console.log('üöÄ ÂºÄÂßãÂº∫ÂåñÈáçÊñ∞ËÆ°ÁÆó...');

        if (!data || data.length === 0) {
            console.log('‚ùå Êï∞ÊçÆ‰∏∫Á©∫ÔºåÊó†Ê≥ïËÆ°ÁÆó');
            return;
        }

        let totalDemandMeters = 0;
        let producedMeters = 0;
        let shippedMeters = 0;
        let validRecords = 0;
        let invalidRecords = 0;

        console.log('üìä ÈÄêÊù°Â§ÑÁêÜÊï∞ÊçÆ...');

        data.forEach((item, index) => {
            try {
                // ÊèêÂèñÈïøÂ∫¶
                let length = this.extractLengthFromSpec(item.spec);

                // Â¶ÇÊûúÊèêÂèñÂ§±Ë¥•ÔºåÂ∞ùËØïÂÖ∂‰ªñÊñπÊ≥ï
                if (length === 6000 && item.spec) {
                    // Â∞ùËØïÊõ¥ÂÆΩÊùæÁöÑÂåπÈÖç
                    const numbers = item.spec.match(/\d+/g);
                    if (numbers) {
                        for (const num of numbers) {
                            const n = parseInt(num);
                            if (n >= 1000 && n <= 20000) {
                                length = n;
                                console.log(`üîç Â§áÁî®ÊñπÊ≥ïËß£ÊûêÈïøÂ∫¶: ${item.spec} -> ${length}mm`);
                                break;
                            }
                        }
                    }
                }

                const planned = parseInt(item.planned) || 0;
                const produced = parseInt(item.produced) || 0;
                const shipped = parseInt(item.shipped) || 0;

                if (length > 0 && planned > 0) {
                    validRecords++;
                    const demandMeter = planned * length / 1000;
                    const producedMeter = produced * length / 1000;
                    const shippedMeter = shipped * length / 1000;

                    totalDemandMeters += demandMeter;
                    producedMeters += producedMeter;
                    shippedMeters += shippedMeter;

                    if (index < 3) { // ÊòæÁ§∫Ââç3Êù°ÁöÑËØ¶ÁªÜËÆ°ÁÆó
                        console.log(`‚úÖ Á¨¨${index + 1}Êù°: ${item.spec}`);
                        console.log(`   ÈïøÂ∫¶: ${length}mm, ËÆ°Âàí: ${planned}Ê†π, Â∑≤‰∫ß: ${produced}Ê†π`);
                        console.log(`   ÈúÄÊ±Ç: ${demandMeter.toFixed(1)}Á±≥, Â∑≤‰∫ß: ${producedMeter.toFixed(1)}Á±≥`);
                    }
                } else {
                    invalidRecords++;
                    if (index < 3) {
                        console.log(`‚ùå Á¨¨${index + 1}Êù°Êó†Êïà: ${item.spec}, ÈïøÂ∫¶=${length}, ËÆ°Âàí=${planned}`);
                    }
                }
            } catch (error) {
                console.error(`Â§ÑÁêÜÁ¨¨${index + 1}Êù°Êï∞ÊçÆÊó∂Âá∫Èîô:`, error);
                invalidRecords++;
            }
        });

        // Êõ¥Êñ∞ÁªüËÆ°Êï∞ÊçÆ
        this.data.totalDemandMeters = totalDemandMeters;
        this.data.producedMeters = producedMeters;
        this.data.shippedMeters = shippedMeters;
        this.data.pendingMeters = totalDemandMeters - producedMeters;
        this.data.unshippedMeters = producedMeters - shippedMeters;

        // ËÆ°ÁÆóÂÆåÊàêÁéá
        this.data.completionRate = totalDemandMeters > 0 ?
            ((producedMeters / totalDemandMeters) * 100).toFixed(1) : 0;

        console.log('üìà Âº∫ÂåñËÆ°ÁÆóÂÆåÊàê:');
        console.log(`  ÊúâÊïàËÆ∞ÂΩï: ${validRecords} / ${data.length}`);
        console.log(`  Êó†ÊïàËÆ∞ÂΩï: ${invalidRecords}`);
        console.log(`  ÊÄªÈúÄÊ±ÇÈáè: ${totalDemandMeters.toFixed(1)}Á±≥`);
        console.log(`  Â∑≤Áîü‰∫ßÈáè: ${producedMeters.toFixed(1)}Á±≥`);
        console.log(`  Â∑≤ÂèëË¥ßÈáè: ${shippedMeters.toFixed(1)}Á±≥`);
        console.log(`  ÂÆåÊàêÁéá: ${this.data.completionRate}%`);
    }
    
    setupFilters() {
        // Áä∂ÊÄÅÁ≠õÈÄâÂ§çÈÄâÊ°Ü
        const statusCheckboxes = document.querySelectorAll('.checkbox-group input[type="checkbox"]');
        statusCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => this.applyFilters());
        });
        
        // ËßÑÊ†ºÂûãÂè∑‰∏ãÊãâÊ°Ü
        const specSelect = document.querySelector('.select-dropdown');
        if (specSelect) {
            specSelect.addEventListener('change', () => this.applyFilters());
        }
        
        // Â∑•Âú∞Âå∫Âüü‰∏ãÊãâÊ°Ü
        const areaSelects = document.querySelectorAll('.select-dropdown');
        areaSelects.forEach(select => {
            select.addEventListener('change', () => this.applyFilters());
        });
    }
    
    setupChartActions() {
        const chartBtns = document.querySelectorAll('.chart-btn');
        chartBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const icon = btn.querySelector('i');
                if (icon.classList.contains('fa-expand')) {
                    this.expandChart(btn.closest('.chart-card'));
                } else if (icon.classList.contains('fa-download')) {
                    this.downloadChart(btn.closest('.chart-card'));
                }
            });
        });
    }
    
    updateMetrics() {
        // Á¨¨‰∏ÄË°åÂç°ÁâáÔºöÊõ¥Êñ∞ÊÄªÈúÄÊ±ÇÈáèÔºàÁ±≥Âà∂Ôºâ
        const totalElement = document.querySelector('.metric-card.total .metric-value');
        if (totalElement) {
            this.animateNumber(totalElement, this.data.totalDemandMeters || 0, 1);
        }

        // Êõ¥Êñ∞Â∑≤Áîü‰∫ßÈáèÔºàÁ±≥Âà∂Ôºâ
        const producedElement = document.querySelector('.metric-card.produced .metric-value');
        if (producedElement) {
            this.animateNumber(producedElement, this.data.producedMeters || 0, 1);
        }

        // Êõ¥Êñ∞Êú™Áîü‰∫ßÈáèÔºàÁ±≥Âà∂Ôºâ
        const pendingElement = document.querySelector('.metric-card.pending .metric-value');
        if (pendingElement) {
            this.animateNumber(pendingElement, this.data.pendingMeters || 0, 1);
        }

        // Êõ¥Êñ∞Áîü‰∫ßËøõÂ∫¶
        const progressElement = document.querySelector('.metric-card.efficiency .metric-value');
        if (progressElement) {
            progressElement.textContent = `${this.data.completionRate}%`;
        }

        // Á¨¨‰∫åË°åÂç°ÁâáÔºöÊõ¥Êñ∞Â∑≤ÂèëË¥ßÈáèÔºàÁ±≥Âà∂Ôºâ
        const shippedElement = document.querySelector('.metric-card.shipped .metric-value');
        if (shippedElement) {
            this.animateNumber(shippedElement, this.data.shippedMeters || 0, 1);
        }

        // Êõ¥Êñ∞Êú™ÂèëË¥ßÈáèÔºàÁ±≥Âà∂Ôºâ
        const unshippedElement = document.querySelector('.metric-card.unshipped .metric-value');
        if (unshippedElement) {
            this.animateNumber(unshippedElement, this.data.unshippedMeters || 0, 1);
        }

        // Êõ¥Êñ∞ÂéüÊùêÈááË¥≠ÔºàÂê®Ôºâ
        const materialElement = document.querySelector('.metric-card.material .metric-value');
        if (materialElement) {
            this.animateNumber(materialElement, this.data.materialTons || 0, 1);
        }

        // Êõ¥Êñ∞Â∫ìÂ≠òÁä∂ÊÄÅ
        const inventoryStatusElement = document.querySelector('.metric-card.inventory .metric-value');
        const inventoryQuantityElement = document.querySelector('#inventoryQuantity');
        if (inventoryStatusElement && this.data.inventoryStatus) {
            inventoryStatusElement.textContent = this.data.inventoryStatus.status;
            // ÁßªÈô§Ëá™ÂÆö‰πâÈ¢úËâ≤Ôºå‰ΩøÁî®Áªü‰∏ÄÁöÑÊñáÂ≠óÈ¢úËâ≤
            inventoryStatusElement.style.color = '';
        }
        if (inventoryQuantityElement) {
            this.animateNumber(inventoryQuantityElement, this.data.unshippedMeters || 0, 1);
        }

        // Êõ¥Êñ∞ÂÆåÊàêÁéá
        const completionElements = document.querySelectorAll('.metric-subtitle');
        completionElements.forEach(element => {
            if (element.textContent.includes('ÂÆåÊàêÁéá')) {
                element.textContent = `ÂÆåÊàêÁéá: ${this.data.completionRate}%`;
            }
            if (element.textContent.includes('ÂæÖÂÆåÊàê')) {
                element.textContent = `ÂæÖÂÆåÊàê: ${(100 - this.data.completionRate).toFixed(1)}%`;
            }
        });

        // Êõ¥Êñ∞ËøõÂ∫¶ÁéØ
        this.updateProgressRing();
    }
    
    animateNumber(element, targetValue, decimals = 0) {
        const startValue = parseFloat(element.textContent.replace(/,/g, '')) || 0;
        const duration = 1000; // 1ÁßíÂä®Áîª
        const startTime = performance.now();
        
        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // ‰ΩøÁî®ÁºìÂä®ÂáΩÊï∞
            const easeOutQuart = 1 - Math.pow(1 - progress, 4);
            const currentValue = startValue + (targetValue - startValue) * easeOutQuart;
            
            element.textContent = this.formatNumber(currentValue, decimals);
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };
        
        requestAnimationFrame(animate);
    }
    
    formatNumber(num, decimals = 0) {
        return new Intl.NumberFormat('zh-CN', {
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        }).format(num);
    }
    
    updateProgressRing() {
        const progressCircle = document.querySelector('.progress-ring-circle');
        const progressText = document.querySelector('.progress-text');
        
        if (progressCircle && progressText) {
            const radius = 25;
            const circumference = 2 * Math.PI * radius;
            const offset = circumference - (this.data.completionRate / 100) * circumference;
            
            progressCircle.style.strokeDasharray = circumference;
            progressCircle.style.strokeDashoffset = offset;
            progressText.textContent = `${this.data.completionRate}%`;
        }
    }
    
    updateLastUpdateTime() {
        const lastUpdateElement = document.getElementById('lastUpdate');
        if (lastUpdateElement) {
            const now = new Date();
            const timeString = now.toLocaleString('zh-CN', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            lastUpdateElement.textContent = timeString;
        }
    }
    
    refreshData() {
        const refreshBtn = document.getElementById('refreshBtn');
        const icon = refreshBtn.querySelector('i');

        // Ê∑ªÂä†Âä†ËΩΩÁä∂ÊÄÅ
        icon.classList.add('fa-spin');
        refreshBtn.disabled = true;

        console.log('üîÑ ÊâãÂä®Âà∑Êñ∞Êï∞ÊçÆ...');

        // Âº∫Âà∂ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
        if (window.dataManager) {
            console.log('ÈáçÊñ∞Âä†ËΩΩÊú¨Âú∞Â≠òÂÇ®Êï∞ÊçÆ...');
            window.dataManager.loadFromLocalStorage();
            console.log('ÈáçÊñ∞Âä†ËΩΩÂêéÊï∞ÊçÆÊù°Êï∞:', window.dataManager.data.length);
        }

        // ‰ªéÊï∞ÊçÆÁÆ°ÁêÜÂô®Âà∑Êñ∞ÁúüÂÆûÊï∞ÊçÆ
        setTimeout(() => {
            // ‰ªéÊï∞ÊçÆÁÆ°ÁêÜÂô®Ëé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆ
            this.updateMetricsFromDataManager();
            this.updateLastUpdateTime();
            this.updateCharts();

            // ÁßªÈô§Âä†ËΩΩÁä∂ÊÄÅ
            icon.classList.remove('fa-spin');
            refreshBtn.disabled = false;

            // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
            this.showNotification('Êï∞ÊçÆÂ∑≤Êõ¥Êñ∞', 'success');
        }, 1500);
    }
    
    applyFilters() {
        // Ëé∑ÂèñÂΩìÂâçÁ≠õÈÄâÊù°‰ª∂
        const statusFilters = Array.from(document.querySelectorAll('.checkbox-group input[type="checkbox"]:checked'))
            .map(cb => cb.parentElement.textContent.trim());
        
        const specFilter = document.querySelector('.select-dropdown').value;
        
        console.log('Â∫îÁî®Á≠õÈÄâÊù°‰ª∂:', { statusFilters, specFilter });
        
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑÁ≠õÈÄâÈÄªËæë
        this.updateCharts();
        this.showNotification('Á≠õÈÄâÊù°‰ª∂Â∑≤Â∫îÁî®', 'info');
    }
    
    expandChart(chartCard) {
        // ÂÆûÁé∞ÂõæË°®ÂÖ®Â±èÂäüËÉΩ
        if (chartCard.classList.contains('expanded')) {
            chartCard.classList.remove('expanded');
            document.body.classList.remove('chart-expanded');
        } else {
            chartCard.classList.add('expanded');
            document.body.classList.add('chart-expanded');
        }
        
        // ÈáçÊñ∞Ë∞ÉÊï¥ÂõæË°®Â§ßÂ∞è
        setTimeout(() => {
            this.resizeCharts();
        }, 300);
    }
    
    downloadChart(chartCard) {
        const canvas = chartCard.querySelector('canvas');
        if (canvas) {
            const link = document.createElement('a');
            link.download = `chart-${Date.now()}.png`;
            link.href = canvas.toDataURL();
            link.click();
            
            this.showNotification('ÂõæË°®Â∑≤‰∏ãËΩΩ', 'success');
        }
    }
    
    resizeCharts() {
        Object.values(this.charts).forEach(chart => {
            if (chart && typeof chart.resize === 'function') {
                chart.resize();
            }
        });
    }
    
    updateCharts() {
        // Êõ¥Êñ∞ÊâÄÊúâÂõæË°®Êï∞ÊçÆ
        if (this.charts && this.charts.productionChart) {
            this.updateProductionChart();
        }
        if (this.charts && this.charts.shippingChart) {
            this.updateShippingChart();
        }
        if (this.charts && this.charts.specChart) {
            this.updateSpecChart();
        }
        if (this.charts && this.charts.areaChart) {
            this.updateAreaChart();
        }
    }
    
    startAutoRefresh() {
        // ÊØè5ÂàÜÈíüËá™Âä®Âà∑Êñ∞‰∏ÄÊ¨°Êï∞ÊçÆÊòæÁ§∫
        this.refreshInterval = setInterval(() => {
            this.updateMetricsFromDataManager();
            this.updateLastUpdateTime();
        }, 5 * 60 * 1000);
    }

    // ÂÆöÊúüÊ£ÄÊü•Êï∞ÊçÆÁä∂ÊÄÅ
    startDataCheck() {
        // ÊØè10ÁßíÊ£ÄÊü•‰∏ÄÊ¨°Êï∞ÊçÆÁä∂ÊÄÅ
        this.dataCheckInterval = setInterval(() => {
            this.checkDataStatus();
        }, 10 * 1000);
    }

    // Ê£ÄÊü•Êï∞ÊçÆÁä∂ÊÄÅÔºàÂ¢ûÂº∫ÁâàÊú¨Ôºâ
    checkDataStatus() {
        if (!window.dataManager) return;

        const currentDataLength = window.dataManager.data ? window.dataManager.data.length : 0;
        const currentMetrics = this.data.totalDemandMeters || 0;
        const currentProduced = this.data.producedMeters || 0;
        const currentShipped = this.data.shippedMeters || 0;

        // ËØ¶ÁªÜÁöÑÊï∞ÊçÆÁä∂ÊÄÅÊ£ÄÊü•
        const hasData = currentDataLength > 0;
        const hasMetrics = currentMetrics > 0 || currentProduced > 0 || currentShipped > 0;

        // Â¶ÇÊûúÊúâÊï∞ÊçÆ‰ΩÜÁªüËÆ°‰∏∫0ÔºåÂº∫Âà∂Êõ¥Êñ∞
        if (hasData && !hasMetrics) {
            console.log('üîç Ê£ÄÊµãÂà∞Êï∞ÊçÆ‰∏çÂêåÊ≠•ÔºåÂº∫Âà∂Êõ¥Êñ∞...');
            console.log('Êï∞ÊçÆÁä∂ÊÄÅ:', {
                dataLength: currentDataLength,
                totalDemandMeters: currentMetrics,
                producedMeters: currentProduced,
                shippedMeters: currentShipped
            });

            // Âº∫Âà∂ÈáçÊñ∞ËÆ°ÁÆó
            this.updateMetricsFromDataManager();

            // Â¶ÇÊûúËøòÊòØ0ÔºåÂÜçÊ¨°Â∞ùËØï
            setTimeout(() => {
                const newMetrics = this.data.totalDemandMeters || 0;
                if (currentDataLength > 0 && newMetrics === 0) {
                    console.log('‚ö†Ô∏è Á¨¨‰∫åÊ¨°Ê£ÄÊü•‰ªçÁÑ∂‰∏çÂêåÊ≠•ÔºåÊ∑±Â∫¶‰øÆÂ§ç...');
                    this.deepDataSync();
                }
            }, 2000);
        }
    }

    // Ê∑±Â∫¶Êï∞ÊçÆÂêåÊ≠•‰øÆÂ§ç
    deepDataSync() {
        console.log('üîß ÊâßË°åÊ∑±Â∫¶Êï∞ÊçÆÂêåÊ≠•‰øÆÂ§ç...');

        if (!window.dataManager || !window.dataManager.data) {
            console.log('‚ùå DataManagerÊàñÊï∞ÊçÆ‰∏çÂ≠òÂú®');
            return;
        }

        // Âº∫Âà∂ÈáçÊñ∞Âä†ËΩΩÊú¨Âú∞Êï∞ÊçÆ
        window.dataManager.loadFromLocalStorage();

        setTimeout(() => {
            // ÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°
            this.updateMetricsFromDataManager();

            // È™åËØÅ‰øÆÂ§çÁªìÊûú
            setTimeout(() => {
                const finalMetrics = this.data.totalDemandMeters || 0;
                const dataLength = window.dataManager.data ? window.dataManager.data.length : 0;

                if (dataLength > 0 && finalMetrics > 0) {
                    console.log('‚úÖ Ê∑±Â∫¶ÂêåÊ≠•‰øÆÂ§çÊàêÂäü');
                    this.showNotification('Êï∞ÊçÆÂêåÊ≠•Â∑≤‰øÆÂ§ç', 'success');
                } else {
                    console.log('‚ùå Ê∑±Â∫¶ÂêåÊ≠•‰øÆÂ§çÂ§±Ë¥•');
                    this.showNotification('Êï∞ÊçÆÂêåÊ≠•ÂºÇÂ∏∏ÔºåËØ∑ÊâãÂä®Âà∑Êñ∞', 'warning');
                }
            }, 1000);
        }, 500);
    }
    
    stopAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
        if (this.dataCheckInterval) {
            clearInterval(this.dataCheckInterval);
            this.dataCheckInterval = null;
        }
    }
    
    showNotification(message, type = 'info') {
        // ÂàõÂª∫ÈÄöÁü•ÂÖÉÁ¥†
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // Ê∑ªÂä†Ê†∑Âºè
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '12px 20px',
            borderRadius: '8px',
            color: 'white',
            fontWeight: '500',
            zIndex: '10000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease-in-out',
            backgroundColor: type === 'success' ? '#10b981' : 
                           type === 'error' ? '#ef4444' : '#3b82f6'
        });
        
        document.body.appendChild(notification);
        
        // ÊòæÁ§∫Âä®Áîª
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Ëá™Âä®ÈöêËóè
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }
    
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    // ÂàùÂßãÂåñÂõæË°®ÔºàÂú®charts.js‰∏≠ÂÆûÁé∞Ôºâ
    initializeCharts() {
        if (typeof window.initCharts === 'function') {
            this.charts = window.initCharts();
            // ÂàùÂßãÂåñÂêéÁ´ãÂç≥Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
            setTimeout(() => {
                this.updateCharts();
            }, 200);
        }
    }


    
    // Êõ¥Êñ∞ÂõæË°®ÊñπÊ≥ïÔºà‰ΩøÁî®ÁúüÂÆûÊï∞ÊçÆÔºâ
    updateProductionChart() {
        if (typeof window.updateProductionChart === 'function' && window.dataManager) {
            window.updateProductionChart(this.charts.productionChart, window.dataManager.data);
        }
    }

    updateShippingChart() {
        if (typeof window.updateShippingChart === 'function' && window.dataManager) {
            window.updateShippingChart(this.charts.shippingChart, window.dataManager.data);
        }
    }

    updateSpecChart() {
        if (typeof window.updateSpecChart === 'function' && window.dataManager && this.charts.specChart) {
            window.updateSpecChart(this.charts.specChart, window.dataManager.data);
        }
    }

    updateAreaChart() {
        if (typeof window.updateAreaChart === 'function' && window.dataManager) {
            window.updateAreaChart(this.charts.areaChart, window.dataManager.data);
        }
    }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    window.dashboard = new SteelProductionDashboard();
});

// È°µÈù¢Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
window.addEventListener('beforeunload', () => {
    if (window.dashboard) {
        window.dashboard.stopAutoRefresh();
    }
});
