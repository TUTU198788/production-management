// Êµ¶‰∏úÊú∫Âú∫T3Ê°ÅÊû∂Èí¢Á≠ãÁîü‰∫ßÊé®ËøõÁÆ°ÁêÜÁ≥ªÁªü - ‰∏ªË¶ÅJavaScriptÊñá‰ª∂
// 16:9Â±èÂπï‰ºòÂåñÁâàÊú¨

class SteelProductionDashboard {
    constructor() {
        this.data = {
            totalDemand: 0,
            produced: 0,
            pending: 0,
            efficiency: 2847,
            completionRate: 0,
            lastUpdate: new Date()
        };

        this.charts = {};
        this.refreshInterval = null;
        this.init();
    }
    
    init() {
        this.setupEventListeners();

        // Âª∂ËøüÂàùÂßãÂåñÔºåÁ°Æ‰øùDataManagerÂÆåÂÖ®Âä†ËΩΩ
        setTimeout(() => {
            this.updateMetricsFromDataManager();
            this.updateLastUpdateTime();
        }, 200);

        this.startAutoRefresh();

        // Âª∂ËøüÂä†ËΩΩÂõæË°®ÔºåÁ°Æ‰øùDOMÂÆåÂÖ®Âä†ËΩΩ
        setTimeout(() => {
            this.initializeCharts();
        }, 300);

        // ÂÆöÊúüÊ£ÄÊü•Êï∞ÊçÆÁä∂ÊÄÅÔºåÁ°Æ‰øùÊï∞ÊçÆÂêåÊ≠•
        this.startDataCheck();
    }

    // ‰ªéÊï∞ÊçÆÁÆ°ÁêÜÂô®Ëé∑ÂèñÂÆûÊó∂Êï∞ÊçÆ
    updateMetricsFromDataManager() {
        console.log('=== Êï∞ÊçÆÊ∫êÊ£ÄÊü• ===');
        console.log('window.dataManager Â≠òÂú®:', !!window.dataManager);
        console.log('window.dataCore Â≠òÂú®:', !!window.dataCore);

        // ‰ºòÂÖà‰ΩøÁî®Êñ∞ÁöÑÊ®°ÂùóÂåñÊû∂ÊûÑ
        if (window.dataCore && window.productionManager && window.shippingManager) {
            console.log('‚úÖ ‰ΩøÁî®Êñ∞ÁöÑÊ®°ÂùóÂåñÊû∂ÊûÑÊõ¥Êñ∞Êï∞ÊçÆ');
            this.updateMetricsFromModules();
            return;
        }

        if (!window.dataManager) {
            console.error('‚ùå window.dataManager ‰∏çÂ≠òÂú®ÔºÅ');

            // Â∞ùËØïÁ¥ßÊÄ•‰øÆÂ§ç
            console.log('Â∞ùËØïÁ¥ßÊÄ•‰øÆÂ§çDataManager...');
            try {
                if (typeof DataManager !== 'undefined') {
                    window.dataManager = new DataManager();
                    console.log('‚úÖ Á¥ßÊÄ•‰øÆÂ§çÊàêÂäüÔºÅÊï∞ÊçÆÊù°Êï∞:', window.dataManager.data.length);

                    // Â¶ÇÊûúÊï∞ÊçÆ‰∏∫Á©∫ÔºåÈáçÊñ∞Âä†ËΩΩ
                    if (window.dataManager.data.length === 0) {
                        window.dataManager.loadFromLocalStorage();
                        console.log('ÈáçÊñ∞Âä†ËΩΩÂêéÊï∞ÊçÆÊù°Êï∞:', window.dataManager.data.length);
                    }
                } else {
                    console.error('‚ùå DataManagerÁ±ª‰∏çÂ≠òÂú®');
                    return;
                }
            } catch (error) {
                console.error('‚ùå Á¥ßÊÄ•‰øÆÂ§çÂ§±Ë¥•:', error);
                return;
            }
        }

        console.log('dataManager.data Â≠òÂú®:', !!window.dataManager.data);
        console.log('dataManager.data Á±ªÂûã:', typeof window.dataManager.data);
        console.log('dataManager.data ÈïøÂ∫¶:', window.dataManager.data ? window.dataManager.data.length : 'undefined');

        // Ê£ÄÊü•Êú¨Âú∞Â≠òÂÇ®
        const localStorageData = localStorage.getItem('productionData');
        console.log('Êú¨Âú∞Â≠òÂÇ®Êï∞ÊçÆÂ≠òÂú®:', !!localStorageData);
        if (localStorageData) {
            try {
                const parsed = JSON.parse(localStorageData);
                console.log('Êú¨Âú∞Â≠òÂÇ®Êï∞ÊçÆÊù°Êï∞:', parsed.length);
                console.log('Êú¨Âú∞Â≠òÂÇ®Ââç3Êù°Êï∞ÊçÆ:', parsed.slice(0, 3));
            } catch (e) {
                console.error('Êú¨Âú∞Â≠òÂÇ®Êï∞ÊçÆËß£ÊûêÂ§±Ë¥•:', e);
            }
        }

        // Ê£ÄÊü•Ë°®Ê†º‰∏≠ÂÆûÈôÖÊòæÁ§∫ÁöÑÊï∞ÊçÆ
        const tableRows = document.querySelectorAll('#dataTable tbody tr:not(.no-data)');
        console.log('Ë°®Ê†ºÊòæÁ§∫Ë°åÊï∞:', tableRows.length);

        if (tableRows.length > 0) {
            console.log('Ë°®Ê†ºÂâç3Ë°åÊï∞ÊçÆ:');
            for (let i = 0; i < Math.min(3, tableRows.length); i++) {
                const row = tableRows[i];
                const cells = row.querySelectorAll('td');
                if (cells.length >= 4) {
                    console.log(`Ë°®Ê†ºÁ¨¨${i+1}Ë°å: ${cells[1].textContent.trim()} (${cells[2].textContent.trim()}) - ËÆ°Âàí${cells[3].textContent.trim()}Ê†π`);
                }
            }
        }

        if (window.dataManager && window.dataManager.data) {
            const data = window.dataManager.data;

            console.log('=== dataManager.data ÂÜÖÂÆπÊ£ÄÊü• ===');
            console.log('Êï∞ÊçÆÊù°Êï∞:', data.length);

            if (data.length === 0) {
                console.log('‚ùå dataManager.data ‰∏∫Á©∫ÔºÅ');
                // Â∞ùËØïÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
                console.log('Â∞ùËØïÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ...');
                window.dataManager.loadFromLocalStorage();
                console.log('ÈáçÊñ∞Âä†ËΩΩÂêéÊï∞ÊçÆÊù°Êï∞:', window.dataManager.data.length);

                if (window.dataManager.data.length === 0) {
                    console.log('‚ö†Ô∏è Êï∞ÊçÆ‰ªç‰∏∫Á©∫ÔºåÊòæÁ§∫Á©∫Áä∂ÊÄÅ');
                    this.data = {
                        totalDemandMeters: 0,
                        producedMeters: 0,
                        shippedMeters: 0,
                        pendingMeters: 0,
                        unshippedMeters: 0,
                        totalDemand: 0,
                        produced: 0,
                        pending: 0,
                        completionRate: 0,
                        materialTons: 0,
                        inventoryStatus: { status: 'Êó†Êï∞ÊçÆ', color: '#6b7280' },
                        efficiency: 0
                    };
                    this.updateMetrics();
                    return;
                } else {
                    console.log('‚úÖ ÈáçÊñ∞Âä†ËΩΩÊàêÂäüÔºåÁªßÁª≠Â§ÑÁêÜÊï∞ÊçÆ');
                    // ÈáçÊñ∞Ëé∑ÂèñÊï∞ÊçÆÂºïÁî®ÔºåÁªßÁª≠Â§ÑÁêÜ
                    const reloadedData = window.dataManager.data;
                    this.processDataAndCalculate(reloadedData);
                    return;
                }
            }

            this.processDataAndCalculate(data);
        }

        this.updateMetrics();

        // === Ëá™Âä®Ë°•‰∏ÅÔºö‰∏ªÁïåÈù¢Êï∞ÊçÆÂêåÊ≠•Âà∞Êú¨Âú∞Â≠òÂÇ® ===
        try {
            if (this.data) {
                localStorage.setItem('productionData', JSON.stringify(this.data.rawData || window.dataManager.data || []));
                console.log('‚úÖ Â∑≤Ëá™Âä®ÂêåÊ≠•‰∏ªÁïåÈù¢Êï∞ÊçÆÂà∞Êú¨Âú∞Â≠òÂÇ® productionData');
            }
        } catch (e) {
            console.error('ÂêåÊ≠•‰∏ªÁïåÈù¢Êï∞ÊçÆÂà∞Êú¨Âú∞Â≠òÂÇ®Â§±Ë¥•:', e);
        }
    }

    // Â§ÑÁêÜÊï∞ÊçÆÂπ∂ËÆ°ÁÆóÁªüËÆ°‰ø°ÊÅØ
    processDataAndCalculate(data) {
        console.log('üîÑ processDataAndCalculate Ë¢´Ë∞ÉÁî®ÔºåÊï∞ÊçÆÊù°Êï∞:', data.length);

        if (!data || data.length === 0) {
            console.warn('‚ö†Ô∏è Êï∞ÊçÆ‰∏∫Á©∫ÔºåÊó†Ê≥ïËÆ°ÁÆóÁªüËÆ°');
            this.data.totalDemandMeters = 0;
            this.data.producedMeters = 0;
            this.data.pendingMeters = 0;
            this.data.shippedMeters = 0;
            return;
        }

        console.log('üìä Êï∞ÊçÆÊ†∑Êú¨ (Ââç3Êù°):');
        data.slice(0, 3).forEach((item, index) => {
            console.log(`Á¨¨${index + 1}Êù°:`, {
                spec: item.spec,
                area: item.area,
                planned: item.planned,
                produced: item.produced,
                shipped: item.shipped || 0
            });
        });

        console.log('=== üßÆ ÂºÄÂßãËÆ°ÁÆóÁªüËÆ°Êï∞ÊçÆ ===');
        let totalCheck = 0;
        let validRecords = 0;
        let invalidRecords = 0;

        // ËÆ°ÁÆóÊÄªÁ±≥Êï∞ÔºàÊ†πÊï∞ √ó ÈïøÂ∫¶Ôºâ
        this.data.totalDemandMeters = data.reduce((sum, item, index) => {
            const length = this.extractLengthFromSpec(item.spec); // ÊèêÂèñÈïøÂ∫¶ÔºàmmÔºâ
            const planned = item.planned || 0;
            const meters = planned * length / 1000; // ËΩ¨Êç¢‰∏∫Á±≥

            if (length > 0 && planned > 0) {
                validRecords++;
                totalCheck += meters;

                if (index < 5) { // Âè™ÊòæÁ§∫Ââç5Êù°ÁöÑËØ¶ÁªÜËÆ°ÁÆó
                    console.log(`‚úÖ Á¨¨${index + 1}Êù°: ${item.spec} (${item.area})`);
                    console.log(`   ËÆ°ÁÆó: ${planned}Ê†π √ó ${length}mm √∑ 1000 = ${meters.toFixed(1)}Á±≥`);
                }
            } else {
                invalidRecords++;
                if (index < 5) {
                    console.log(`‚ùå Á¨¨${index + 1}Êù°Êó†Êïà: ${item.spec}, ÈïøÂ∫¶=${length}, ËÆ°Âàí=${planned}`);
                }
            }

            return sum + meters;
        }, 0);

        console.log(`üìà ÊÄªÈúÄÊ±ÇÈáèËÆ°ÁÆóÂÆåÊàê:`);
        console.log(`   ÊúâÊïàËÆ∞ÂΩï: ${validRecords} Êù°`);
        console.log(`   Êó†ÊïàËÆ∞ÂΩï: ${invalidRecords} Êù°`);
        console.log(`   ÊúÄÁªàÊÄªÈúÄÊ±ÇÈáè: ${this.data.totalDemandMeters.toFixed(1)}Á±≥`);
        console.log(`   È™åËØÅËÆ°ÁÆó: ${totalCheck.toFixed(1)}Á±≥`);

        // ËÆ°ÁÆóÂ∑≤Áîü‰∫ßÈáèÔºàÁ±≥Ôºâ
        let producedValidRecords = 0;
        this.data.producedMeters = data.reduce((sum, item) => {
            const length = this.extractLengthFromSpec(item.spec);
            const produced = item.produced || 0;
            const meters = produced * length / 1000;

            if (produced > 0) {
                producedValidRecords++;
                if (producedValidRecords <= 3) { // Âè™ÊòæÁ§∫Ââç3Êù°
                    console.log(`‚úÖ Â∑≤Áîü‰∫ß ${item.spec}: ${produced}Ê†π √ó ${length}mm = ${meters.toFixed(1)}Á±≥`);
                }
            }
            return sum + meters;
        }, 0);

        // ËÆ°ÁÆóÂ∑≤ÂèëË¥ßÈáèÔºàÁ±≥Ôºâ- ‰ΩøÁî®Â§öÁßçÊï∞ÊçÆÊ∫êÁ°Æ‰øùÂáÜÁ°ÆÊÄß
        let calculatedShippedMeters = 0;
        let shippedValidRecords = 0;

        // ÊñπÊ≥ï1Ôºö‰ºòÂÖà‰ªéÂèëË¥ßÂéÜÂè≤Áõ¥Êé•ËÆ°ÁÆó
        if (window.dataManager && window.dataManager.shippingHistory && window.dataManager.shippingHistory.length > 0) {
            console.log(`üì¶ ÊñπÊ≥ï1: ‰ªéÂèëË¥ßÂéÜÂè≤Áõ¥Êé•ËÆ°ÁÆó (${window.dataManager.shippingHistory.length} Êù°ËÆ∞ÂΩï)`);

            calculatedShippedMeters = window.dataManager.shippingHistory.reduce((sum, record) => {
                const recordMeters = record.totalMeters || 0;
                return sum + recordMeters;
            }, 0);

            if (calculatedShippedMeters > 0) {
                console.log(`üì¶ ‰ªéÂèëË¥ßÂéÜÂè≤ËÆ°ÁÆóÂèëË¥ßÈáè: ${calculatedShippedMeters.toFixed(1)}Á±≥`);

                // ÊòæÁ§∫ÂâçÂá†Êù°ÂèëË¥ßËÆ∞ÂΩï
                window.dataManager.shippingHistory.slice(0, 3).forEach(record => {
                    if (record.totalMeters > 0) {
                        console.log(`  ${record.customerName}: ${record.totalMeters.toFixed(1)}Á±≥ (${record.date})`);
                    }
                });
            }
        }

        // ÊñπÊ≥ï2Ôºö‰ΩøÁî®ÂÆ¢Êà∑ÂèëË¥ßÁªüËÆ°
        if (calculatedShippedMeters === 0 && window.dataManager && typeof window.dataManager.calculateCustomerStats === 'function') {
            console.log(`üì¶ ÊñπÊ≥ï2: ‰ΩøÁî®ÂÆ¢Êà∑ÂèëË¥ßÁªüËÆ°`);
            try {
                const customerStats = window.dataManager.calculateCustomerStats();
                const customerShippedMeters = customerStats.reduce((sum, customer) => {
                    return sum + (customer.totalMeters || 0);
                }, 0);

                if (customerShippedMeters > 0) {
                    calculatedShippedMeters = customerShippedMeters;
                    console.log(`üì¶ ÂÆ¢Êà∑ÂèëË¥ßÁªüËÆ°ËØ¶ÊÉÖ:`);
                    customerStats.forEach(customer => {
                        if (customer.totalMeters > 0) {
                            console.log(`  ${customer.customerName}: ${customer.totalMeters.toFixed(1)}Á±≥`);
                        }
                    });
                    console.log(`üì¶ ‰ªéÂÆ¢Êà∑ÁªüËÆ°ËÆ°ÁÆóÂèëË¥ßÈáè: ${calculatedShippedMeters.toFixed(1)}Á±≥`);
                } else {
                    console.log(`‚ö†Ô∏è ÂÆ¢Êà∑ÁªüËÆ°ËøîÂõû0Á±≥ÔºåÊ£ÄÊü•ÂèëË¥ßÂéÜÂè≤Êï∞ÊçÆ...`);

                    // Ê£ÄÊü•ÂèëË¥ßÂéÜÂè≤Êï∞ÊçÆ
                    if (window.dataManager.shippingHistory) {
                        console.log(`üìã ÂèëË¥ßÂéÜÂè≤ËÆ∞ÂΩïÊï∞: ${window.dataManager.shippingHistory.length}`);
                        if (window.dataManager.shippingHistory.length > 0) {
                            console.log(`üìã ÂèëË¥ßÂéÜÂè≤Á§∫‰æã:`, window.dataManager.shippingHistory[0]);
                        }
                    } else {
                        console.log(`‚ùå ÂèëË¥ßÂéÜÂè≤Êï∞ÊçÆ‰∏çÂ≠òÂú®`);
                    }

                    // Ê£ÄÊü•Áîü‰∫ßÊï∞ÊçÆ‰∏≠ÁöÑÂèëË¥ßËÆ∞ÂΩï
                    if (window.dataManager.data) {
                        const itemsWithShipping = window.dataManager.data.filter(item =>
                            item.shippingRecords && item.shippingRecords.length > 0
                        );
                        console.log(`üìã Áîü‰∫ßÊï∞ÊçÆ‰∏≠ÊúâÂèëË¥ßËÆ∞ÂΩïÁöÑÈ°πÁõÆÊï∞: ${itemsWithShipping.length}`);
                        if (itemsWithShipping.length > 0) {
                            console.log(`üìã ÂèëË¥ßËÆ∞ÂΩïÁ§∫‰æã:`, itemsWithShipping[0].shippingRecords[0]);
                        }
                    }
                }
            } catch (error) {
                console.error('‚ùå ÂÆ¢Êà∑ÁªüËÆ°ËÆ°ÁÆóÂ§±Ë¥•:', error);
            }
        }

        // ÊñπÊ≥ï3ÔºöÂ¶ÇÊûúÂâç‰∏§ÁßçÊñπÊ≥ïÈÉΩÊ≤°ÊúâÊï∞ÊçÆÔºå‰ΩøÁî®Áîü‰∫ßÊï∞ÊçÆ‰∏≠ÁöÑshippedÂ≠óÊÆµ
        if (calculatedShippedMeters === 0) {
            console.log(`üì¶ ÊñπÊ≥ï3: ‰ΩøÁî®Áîü‰∫ßÊï∞ÊçÆ‰∏≠ÁöÑshippedÂ≠óÊÆµËÆ°ÁÆóÂèëË¥ßÈáè`);
            calculatedShippedMeters = data.reduce((sum, item) => {
                const length = this.extractLengthFromSpec(item.spec);
                const shipped = item.shipped || 0;
                const meters = shipped * length / 1000;

                if (shipped > 0) {
                    shippedValidRecords++;
                    if (shippedValidRecords <= 3) { // Âè™ÊòæÁ§∫Ââç3Êù°
                        console.log(`‚úÖ Â∑≤ÂèëË¥ß ${item.spec}: ${shipped}Ê†π √ó ${length}mm = ${meters.toFixed(1)}Á±≥`);
                    }
                }
                return sum + meters;
            }, 0);
            console.log(`üì¶ ‰ªéÁîü‰∫ßÊï∞ÊçÆËÆ°ÁÆóÂèëË¥ßÈáè: ${calculatedShippedMeters.toFixed(1)}Á±≥`);
        }



        this.data.shippedMeters = calculatedShippedMeters;

        console.log(`üìä Áîü‰∫ßÁªüËÆ°:`);
        console.log(`   Â∑≤Áîü‰∫ßËÆ∞ÂΩï: ${producedValidRecords} Êù°`);
        console.log(`   Â∑≤Áîü‰∫ßÊÄªÈáè: ${this.data.producedMeters.toFixed(1)}Á±≥`);
        console.log(`üì¶ ÂèëË¥ßÁªüËÆ°:`);
        console.log(`   Â∑≤ÂèëË¥ßËÆ∞ÂΩï: ${shippedValidRecords} Êù°`);
        console.log(`   Â∑≤ÂèëË¥ßÊÄªÈáè: ${this.data.shippedMeters.toFixed(1)}Á±≥`);

        this.data.pendingMeters = this.data.totalDemandMeters - this.data.producedMeters;
        this.data.unshippedMeters = this.data.producedMeters - this.data.shippedMeters;

        // ËÆ°ÁÆóÂéüÊùêÊñôÂÆûÈôÖÈááË¥≠ÈáèÔºàÂê®Ôºâ
        this.data.materialTons = this.calculateActualMaterialPurchased();

        // ËÆ°ÁÆóÂ∫ìÂ≠òÁä∂ÊÄÅ
        this.data.inventoryStatus = this.calculateInventoryStatus(this.data.unshippedMeters);

        // ‰øùÁïôÂéüÊúâÁöÑÊ†πÊï∞ËÆ°ÁÆóÔºàÁî®‰∫éÂÆåÊàêÁéáËÆ°ÁÆóÔºâ
        this.data.totalDemand = data.reduce((sum, item) => sum + item.planned, 0);
        this.data.produced = data.reduce((sum, item) => sum + item.produced, 0);
        this.data.pending = this.data.totalDemand - this.data.produced;
        this.data.completionRate = this.data.totalDemandMeters > 0 ?
            ((this.data.producedMeters / this.data.totalDemandMeters) * 100).toFixed(1) : 0;

        // ËÆ°ÁÆóÁîü‰∫ßÊïàÁéáÔºàÊ†π/Â§©Ôºâ
        this.data.efficiency = this.calculateProductionEfficiency(data);

        console.log('ËÆ°ÁÆóÁªìÊûúÊ±áÊÄª:');
        console.log('ÊÄªÈúÄÊ±ÇÈáè:', this.data.totalDemandMeters.toFixed(1), 'Á±≥');
        console.log('Â∑≤Áîü‰∫ßÈáè:', this.data.producedMeters.toFixed(1), 'Á±≥');
        console.log('ÂæÖÁîü‰∫ßÈáè:', this.data.pendingMeters.toFixed(1), 'Á±≥');
        console.log('Â∑≤ÂèëË¥ßÈáè:', this.data.shippedMeters.toFixed(1), 'Á±≥');
        console.log('Êú™ÂèëË¥ßÈáè:', this.data.unshippedMeters.toFixed(1), 'Á±≥');
    }

    // ËÆ°ÁÆóÂÆûÈôÖÂéüÊùêÊñôÈááË¥≠Èáè
    calculateActualMaterialPurchased() {
        if (window.dataManager && window.dataManager.materialPurchases) {
            return window.dataManager.materialPurchases.reduce((sum, purchase) => {
                return sum + purchase.quantity;
            }, 0);
        }
        return 0;
    }

    // ËÆ°ÁÆóÂ∫ìÂ≠òÁä∂ÊÄÅ
    calculateInventoryStatus(unshippedMeters) {
        if (unshippedMeters < 1000) {
            return { status: 'ÂÅè‰Ωé', color: '#ef4444' };
        } else if (unshippedMeters < 5000) {
            return { status: 'Ê≠£Â∏∏', color: '#10b981' };
        } else if (unshippedMeters < 10000) {
            return { status: 'ÂÖÖË∂≥', color: '#3b82f6' };
        } else {
            return { status: 'ËøáÂ§ö', color: '#f59e0b' };
        }
    }

    // ‰ªéËßÑÊ†ºÂûãÂè∑‰∏≠ÊèêÂèñÈïøÂ∫¶ÔºàmmÔºâ- Â¢ûÂº∫ÁâàÊú¨
    extractLengthFromSpec(spec) {
        if (!spec) {
            console.warn('ËßÑÊ†º‰∏∫Á©∫Ôºå‰ΩøÁî®ÈªòËÆ§ÈïøÂ∫¶6000mm');
            return 6000;
        }

        console.log(`Ëß£ÊûêËßÑÊ†º: "${spec}"`);

        // Â§öÁßçÈïøÂ∫¶Ê†ºÂºèÁöÑÂåπÈÖçÊ®°Âºè
        const patterns = [
            /L=(\d+)/,           // L=6000
            /ÈïøÂ∫¶[Ôºö:]\s*(\d+)/,   // ÈïøÂ∫¶Ôºö6000 Êàñ ÈïøÂ∫¶:6000
            /(\d+)mm/i,          // 6000mm Êàñ 6000MM
            /(\d+)MM/,           // 6000MM
            /L(\d+)/,            // L6000
            /-(\d+)$/,           // ËßÑÊ†º-6000
            /√ó(\d+)/,            // ËßÑÊ†º√ó6000
            /\*(\d+)/,           // ËßÑÊ†º*6000
            /(\d{4,})/           // Áõ¥Êé•ÁöÑ4‰Ωç‰ª•‰∏äÊï∞Â≠óÔºàÂ¶Ç6000Ôºâ
        ];

        for (let i = 0; i < patterns.length; i++) {
            const pattern = patterns[i];
            const match = spec.match(pattern);
            if (match) {
                const length = parseInt(match[1]);
                // È™åËØÅÈïøÂ∫¶ÊòØÂê¶Âú®ÂêàÁêÜËåÉÂõ¥ÂÜÖÔºà1Á±≥Âà∞20Á±≥Ôºâ
                if (length >= 1000 && length <= 20000) {
                    console.log(`‚úÖ ÊàêÂäüËß£ÊûêÈïøÂ∫¶: ${length}mm (‰ΩøÁî®Ê®°Âºè${i + 1})`);
                    return length;
                } else {
                    console.warn(`‚ö†Ô∏è ÈïøÂ∫¶Ë∂ÖÂá∫ÂêàÁêÜËåÉÂõ¥: ${length}mm`);
                }
            }
        }

        // Â¶ÇÊûúÈÉΩÊ≤°ÊúâÂåπÈÖçÂà∞Ôºå‰ΩøÁî®ÈªòËÆ§ÈïøÂ∫¶
        console.warn(`‚ö†Ô∏è Êó†Ê≥ïËß£ÊûêËßÑÊ†º"${spec}"‰∏≠ÁöÑÈïøÂ∫¶Ôºå‰ΩøÁî®ÈªòËÆ§ÈïøÂ∫¶6000mm`);
        return 6000;
    }

    // ËÆ°ÁÆóÁîü‰∫ßÊïàÁéá
    calculateProductionEfficiency(data) {
        if (!data || data.length === 0) return 0;

        // ËÆ°ÁÆóÊÄªÂ∑≤Áîü‰∫ßÊï∞Èáè
        const totalProduced = data.reduce((sum, item) => sum + item.produced, 0);

        if (totalProduced === 0) return 0;

        // ÂÅáËÆæÁîü‰∫ßÂë®Êúü‰∏∫30Â§©ÔºàÂèØ‰ª•Ê†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥Ôºâ
        const productionDays = 30;
        const efficiency = Math.round(totalProduced / productionDays);

        return efficiency;
    }
    
    setupEventListeners() {
        // Âà∑Êñ∞ÊåâÈíÆ - Èò≤Ê≠¢È°µÈù¢Âà∑Êñ∞
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', (event) => {
                // ÊòéÁ°ÆÈòªÊ≠¢‰ªª‰ΩïÈªòËÆ§Ë°å‰∏∫Âíå‰∫ã‰ª∂ÂÜíÊ≥°
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();

                console.log('üîÑ Âà∑Êñ∞ÊåâÈíÆË¢´ÁÇπÂáªÔºåÈòªÊ≠¢È°µÈù¢Âà∑Êñ∞');

                // Ë∞ÉÁî®Êï∞ÊçÆÂà∑Êñ∞ÊñπÊ≥ï
                this.refreshData();
            });

            // È¢ùÂ§ñ‰øùÊä§ÔºöÈòªÊ≠¢Âè≥ÈîÆËèúÂçïÂèØËÉΩÁöÑÂà∑Êñ∞Êìç‰Ωú
            refreshBtn.addEventListener('contextmenu', (event) => {
                event.preventDefault();
            });

            console.log('‚úÖ Âà∑Êñ∞ÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨Âô®Â∑≤ËÆæÁΩÆÔºàÈò≤È°µÈù¢Âà∑Êñ∞Ôºâ');
        }

        // Êï∞ÊçÆ‰øùÊä§ÈÖçÁΩÆÊåâÈíÆ
        const dataProtectionBtn = document.getElementById('dataProtectionBtn');
        if (dataProtectionBtn) {
            dataProtectionBtn.addEventListener('click', () => this.openDataProtectionConfig());
        }

        // ÂêåÊ≠•‰øÆÂ§çÊåâÈíÆ
        const syncFixBtn = document.getElementById('syncFixBtn');
        if (syncFixBtn) {
            syncFixBtn.addEventListener('click', () => this.quickSyncFix());
        }

        // Ë∞ÉËØïÊåâÈíÆ
        const debugBtn = document.getElementById('debugBtn');
        if (debugBtn) {
            debugBtn.addEventListener('click', () => this.openDebugTool());
        }

        // Á≠õÈÄâÂô®‰∫ã‰ª∂
        this.setupFilters();

        // ÂõæË°®Êìç‰ΩúÊåâÈíÆ
        this.setupChartActions();

        // ËÆæÁΩÆÂç°ÁâáÁÇπÂáª‰∫ã‰ª∂
        this.setupCardClickEvents();

        // Á™óÂè£Â§ßÂ∞èÂèòÂåñÊó∂ÈáçÊñ∞Ë∞ÉÊï¥ÂõæË°®
        window.addEventListener('resize', this.debounce(() => {
            this.resizeCharts();
        }, 300));
    }

    // ÊâìÂºÄÊï∞ÊçÆ‰øùÊä§ÈÖçÁΩÆÁïåÈù¢
    openDataProtectionConfig() {
        if (window.dataProtectionUtils && window.dataProtectionUtils.createConfigInterface) {
            window.dataProtectionUtils.createConfigInterface();
        } else {
            this.showNotification('Êï∞ÊçÆ‰øùÊä§ÈÖçÁΩÆÊ®°ÂùóÊú™Âä†ËΩΩ', 'error');
        }
    }

    // ÊâìÂºÄË∞ÉËØïÂ∑•ÂÖ∑
    openDebugTool() {
        console.log('üîç ÊâìÂºÄË∞ÉËØïÂ∑•ÂÖ∑...');

        // ÂÖàÊâßË°å‰∏ÄÊ¨°Âº∫Âà∂ËÆ°ÁÆóÂπ∂ÊòæÁ§∫ËØ¶ÁªÜÊó•Âøó
        console.log('=== üöÄ ÂºÄÂßãË∞ÉËØïÁªüËÆ°ËÆ°ÁÆó ===');

        if (!window.dataManager) {
            console.error('‚ùå DataManager‰∏çÂ≠òÂú®');
            this.showNotification('DataManagerÊú™Âä†ËΩΩÔºåÊó†Ê≥ïË∞ÉËØï', 'error');
            return;
        }

        const data = window.dataManager.data || [];
        console.log(`üìä Êï∞ÊçÆÁä∂ÊÄÅ: ${data.length} Êù°ËÆ∞ÂΩï`);

        if (data.length === 0) {
            console.warn('‚ö†Ô∏è Êï∞ÊçÆ‰∏∫Á©∫');
            this.showNotification('Êï∞ÊçÆ‰∏∫Á©∫ÔºåËØ∑ÂÖàÂä†ËΩΩÊï∞ÊçÆ', 'warning');
            return;
        }

        // ÊòæÁ§∫ÂâçÂá†Êù°Êï∞ÊçÆÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
        console.log('üìã Êï∞ÊçÆÊ†∑Êú¨:');
        data.slice(0, 5).forEach((item, index) => {
            const length = this.extractLengthFromSpec(item.spec);
            console.log(`Á¨¨${index + 1}Êù°:`, {
                spec: item.spec,
                area: item.area,
                planned: item.planned,
                produced: item.produced,
                shipped: item.shipped || 0,
                extractedLength: length
            });
        });

        // Âº∫Âà∂ÈáçÊñ∞ËÆ°ÁÆó
        console.log('üîÑ Âº∫Âà∂ÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°...');
        this.updateMetricsFromDataManager();

        // ÊòæÁ§∫ËÆ°ÁÆóÁªìÊûú
        setTimeout(() => {
            console.log('üìà ËÆ°ÁÆóÁªìÊûú:');
            console.log('ÊÄªÈúÄÊ±ÇÈáè:', this.data.totalDemandMeters?.toFixed(1) || 0, 'Á±≥');
            console.log('Â∑≤Áîü‰∫ßÈáè:', this.data.producedMeters?.toFixed(1) || 0, 'Á±≥');
            console.log('ÂæÖÁîü‰∫ßÈáè:', this.data.pendingMeters?.toFixed(1) || 0, 'Á±≥');
            console.log('Â∑≤ÂèëË¥ßÈáè:', this.data.shippedMeters?.toFixed(1) || 0, 'Á±≥');

            // ÊâìÂºÄË∞ÉËØïÈ°µÈù¢
            window.open('debug-stats.html', '_blank');
            this.showNotification('Ë∞ÉËØï‰ø°ÊÅØÂ∑≤ËæìÂá∫Âà∞ÊéßÂà∂Âè∞ÔºåË∞ÉËØïÈ°µÈù¢Â∑≤ÊâìÂºÄ', 'info');
        }, 1000);
    }

    // Âø´ÈÄüÂêåÊ≠•‰øÆÂ§çÔºàÂ¢ûÂº∫ÁâàÊú¨Ôºâ
    quickSyncFix() {
        console.log('üîß ÊâßË°åÂø´ÈÄüÂêåÊ≠•‰øÆÂ§ç...');
        this.showNotification('Ê≠£Âú®‰øÆÂ§çÊï∞ÊçÆÂêåÊ≠•ÈóÆÈ¢ò...', 'info');

        // Ê£ÄÊü•ÂΩìÂâçÁä∂ÊÄÅ
        const dataLength = window.dataManager?.data?.length || 0;
        const currentMetrics = this.data.totalDemandMeters || 0;

        console.log('‰øÆÂ§çÂâçÁä∂ÊÄÅ:', {
            dataLength,
            currentMetrics,
            hasDataManager: !!window.dataManager,
            hasDashboard: !!window.dashboard
        });

        if (dataLength === 0) {
            // Â¶ÇÊûúÊ≤°ÊúâÊï∞ÊçÆÔºåÂ∞ùËØïÈáçÊñ∞Âä†ËΩΩ
            console.log('üì• Ê≤°ÊúâÊï∞ÊçÆÔºåÂ∞ùËØïÈáçÊñ∞Âä†ËΩΩ...');
            if (window.dataManager) {
                window.dataManager.loadFromLocalStorage();
                setTimeout(() => {
                    this.quickSyncFix(); // ÈÄíÂΩíË∞ÉÁî®
                }, 1000);
                return;
            } else {
                this.showNotification('DataManagerÊú™Âä†ËΩΩÔºåËØ∑Âà∑Êñ∞È°µÈù¢', 'error');
                return;
            }
        }

        if (dataLength > 0 && currentMetrics === 0) {
            // ÊúâÊï∞ÊçÆ‰ΩÜÁªüËÆ°‰∏∫0ÔºåÊâßË°å‰øÆÂ§ç
            console.log('üîÑ ÊúâÊï∞ÊçÆ‰ΩÜÁªüËÆ°‰∏∫0ÔºåÊâßË°å‰øÆÂ§ç...');

            // ÂÖàÊ£ÄÊü•Êï∞ÊçÆÊ†ºÂºè
            this.diagnoseDataFormat();

            // Ê≠•È™§1ÔºöÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°
            console.log('üßÆ ÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°...');
            this.updateMetricsFromDataManager();

            // Ê≠•È™§2ÔºöÂª∂ËøüÊ£ÄÊü•ÁªìÊûú
            setTimeout(() => {
                const newMetrics = this.data.totalDemandMeters || 0;
                console.log(`ËÆ°ÁÆóÁªìÊûú: ${newMetrics.toFixed(1)}Á±≥`);

                if (newMetrics > 0) {
                    console.log('‚úÖ Âø´ÈÄü‰øÆÂ§çÊàêÂäü');
                    this.showNotification(`‰øÆÂ§çÊàêÂäüÔºÅÊÄªÈúÄÊ±ÇÈáè: ${newMetrics.toFixed(1)}Á±≥`, 'success');
                    this.updateMetrics(); // Êõ¥Êñ∞ÁïåÈù¢ÊòæÁ§∫
                } else {
                    console.log('‚ö†Ô∏è Âø´ÈÄü‰øÆÂ§çÂ§±Ë¥•ÔºåÂ∞ùËØïÊ∑±Â∫¶‰øÆÂ§ç...');
                    this.deepSyncFix();
                }
            }, 1500);
        } else if (dataLength > 0 && currentMetrics > 0) {
            // Êï∞ÊçÆÁä∂ÊÄÅÊ≠£Â∏∏
            console.log('‚úÖ Êï∞ÊçÆÁä∂ÊÄÅÊ≠£Â∏∏ÔºåÊó†ÈúÄ‰øÆÂ§ç');
            this.showNotification(`Êï∞ÊçÆÁä∂ÊÄÅÊ≠£Â∏∏ÔºåÊÄªÈúÄÊ±ÇÈáè: ${currentMetrics.toFixed(1)}Á±≥`, 'success');
        } else {
            // ÂÖ∂‰ªñÂºÇÂ∏∏ÊÉÖÂÜµ
            console.log('‚ùì Êú™Áü•Áä∂ÊÄÅÔºåÊâßË°åÂÆåÊï¥ËØäÊñ≠...');
            this.showNotification('ÊâßË°åÂÆåÊï¥ËØäÊñ≠...', 'warning');
            this.deepSyncFix();
        }
    }

    // ËØäÊñ≠Êï∞ÊçÆÊ†ºÂºè
    diagnoseDataFormat() {
        if (!window.dataManager || !window.dataManager.data) {
            console.log('‚ùå Êó†Ê≥ïËØäÊñ≠ÔºöDataManagerÊàñÊï∞ÊçÆ‰∏çÂ≠òÂú®');
            return;
        }

        const data = window.dataManager.data;
        console.log('üîç ËØäÊñ≠Êï∞ÊçÆÊ†ºÂºè...');
        console.log(`Êï∞ÊçÆÊÄªÊï∞: ${data.length} Êù°`);

        if (data.length === 0) {
            console.log('‚ö†Ô∏è Êï∞ÊçÆ‰∏∫Á©∫');
            return;
        }

        // Ê£ÄÊü•ÂâçÂá†Êù°Êï∞ÊçÆÁöÑÊ†ºÂºè
        const sampleSize = Math.min(5, data.length);
        console.log(`Ê£ÄÊü•Ââç ${sampleSize} Êù°Êï∞ÊçÆ:`);

        for (let i = 0; i < sampleSize; i++) {
            const item = data[i];
            const length = this.extractLengthFromSpec(item.spec);
            console.log(`Á¨¨${i + 1}Êù°:`, {
                spec: item.spec,
                area: item.area,
                planned: item.planned,
                produced: item.produced,
                shipped: item.shipped || 0,
                extractedLength: length
            });
        }

        // ÁªüËÆ°ÊúâÊïàÊï∞ÊçÆ
        let validCount = 0;
        let totalPlanned = 0;

        data.forEach(item => {
            const length = this.extractLengthFromSpec(item.spec);
            const planned = item.planned || 0;

            if (length > 0 && planned > 0) {
                validCount++;
                totalPlanned += planned;
            }
        });

        console.log(`üìä Êï∞ÊçÆÁªüËÆ°:`);
        console.log(`  ÊúâÊïàËÆ∞ÂΩï: ${validCount} / ${data.length}`);
        console.log(`  ÊÄªËÆ°ÂàíÈáè: ${totalPlanned} Ê†π`);

        if (validCount === 0) {
            console.log('‚ùå Ê≤°ÊúâÊúâÊïàÁöÑÊï∞ÊçÆËÆ∞ÂΩïÔºÅ');
            this.showNotification('Êï∞ÊçÆÊ†ºÂºèÂºÇÂ∏∏ÔºåÊ≤°ÊúâÊúâÊïàËÆ∞ÂΩï', 'error');
        } else if (validCount < data.length * 0.5) {
            console.log('‚ö†Ô∏è ÊúâÊïàÊï∞ÊçÆÊØî‰æãËæÉ‰Ωé');
            this.showNotification(`ÊúâÊïàÊï∞ÊçÆ: ${validCount}/${data.length}`, 'warning');
        } else {
            console.log('‚úÖ Êï∞ÊçÆÊ†ºÂºèÊ≠£Â∏∏');
        }
    }

    // Ê∑±Â∫¶ÂêåÊ≠•‰øÆÂ§çÔºàÂ¢ûÂº∫ÁâàÊú¨Ôºâ
    deepSyncFix() {
        console.log('üîß ÊâßË°åÊ∑±Â∫¶ÂêåÊ≠•‰øÆÂ§ç...');
        this.showNotification('ÊâßË°åÊ∑±Â∫¶‰øÆÂ§ç...', 'warning');

        // Ê≠•È™§1ÔºöÂÆåÂÖ®ÈáçÁΩÆÊï∞ÊçÆÁä∂ÊÄÅ
        console.log('üîÑ ÈáçÁΩÆÊï∞ÊçÆÁä∂ÊÄÅ...');
        this.data = {
            totalDemandMeters: 0,
            producedMeters: 0,
            pendingMeters: 0,
            shippedMeters: 0,
            unshippedMeters: 0,
            materialTons: 0,
            completionRate: 0,
            totalDemand: 0,
            produced: 0,
            pending: 0,
            efficiency: 0
        };

        // Ê≠•È™§2ÔºöÂº∫Âà∂ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
        if (window.dataManager) {
            console.log('üì• Âº∫Âà∂ÈáçÊñ∞Âä†ËΩΩÊú¨Âú∞Êï∞ÊçÆ...');
            window.dataManager.loadFromLocalStorage();

            // È™åËØÅÊï∞ÊçÆÂä†ËΩΩ
            setTimeout(() => {
                const loadedData = window.dataManager.data || [];
                console.log(`Êï∞ÊçÆÈáçÊñ∞Âä†ËΩΩÂÆåÊàê: ${loadedData.length} Êù°ËÆ∞ÂΩï`);

                if (loadedData.length === 0) {
                    console.log('‚ùå ÈáçÊñ∞Âä†ËΩΩÂêéÊï∞ÊçÆ‰ªç‰∏∫Á©∫');
                    this.showNotification('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êú¨Âú∞Â≠òÂÇ®', 'error');
                    return;
                }

                // Ê≠•È™§3Ôºö‰ΩøÁî®Âº∫ÂåñÁöÑËÆ°ÁÆóÈÄªËæë
                console.log('üßÆ ‰ΩøÁî®Âº∫ÂåñËÆ°ÁÆóÈÄªËæë...');
                this.forceRecalculateWithEnhancedLogic(loadedData);

                // Ê≠•È™§4ÔºöÂº∫Âà∂Êõ¥Êñ∞ÁïåÈù¢
                setTimeout(() => {
                    console.log('üé® Âº∫Âà∂Êõ¥Êñ∞ÁïåÈù¢...');
                    this.updateMetrics();
                    this.updateCharts();

                    // Ê≠•È™§5ÔºöÊúÄÁªàÈ™åËØÅ
                    setTimeout(() => {
                        const finalMetrics = this.data.totalDemandMeters || 0;
                        const dataLength = window.dataManager?.data?.length || 0;

                        console.log('‰øÆÂ§çÂêéÁä∂ÊÄÅ:', {
                            dataLength,
                            finalMetrics,
                            producedMeters: this.data.producedMeters || 0,
                            pendingMeters: this.data.pendingMeters || 0
                        });

                        if (dataLength > 0 && finalMetrics > 0) {
                            console.log('‚úÖ Ê∑±Â∫¶‰øÆÂ§çÊàêÂäü');
                            this.showNotification(`Ê∑±Â∫¶‰øÆÂ§çÊàêÂäüÔºÅÊÄªÈúÄÊ±ÇÈáè: ${finalMetrics.toFixed(1)}Á±≥`, 'success');
                        } else {
                            console.log('‚ùå Ê∑±Â∫¶‰øÆÂ§çÂ§±Ë¥•');
                            this.showNotification('‰øÆÂ§çÂ§±Ë¥•ÔºåÂèØËÉΩÂ≠òÂú®Êï∞ÊçÆÊ†ºÂºèÈóÆÈ¢ò', 'error');

                            // Êèê‰æõËØ¶ÁªÜËØäÊñ≠
                            setTimeout(() => {
                                if (confirm('‰øÆÂ§çÂ§±Ë¥•ÔºåÊòØÂê¶ÊâìÂºÄÊï∞ÊçÆÊ£ÄÊü•Â∑•ÂÖ∑ËøõË°åËØ¶ÁªÜËØäÊñ≠Ôºü')) {
                                    window.open('check-data.html', '_blank');
                                }
                            }, 2000);
                        }
                    }, 1000);
                }, 500);
            }, 1000);
        } else {
            console.log('‚ùå DataManager‰∏çÂ≠òÂú®');
            this.showNotification('DataManagerÊú™Âä†ËΩΩÔºåËØ∑Âà∑Êñ∞È°µÈù¢', 'error');
        }
    }

    // Âº∫ÂåñÁöÑÈáçÊñ∞ËÆ°ÁÆóÈÄªËæë
    forceRecalculateWithEnhancedLogic(data) {
        console.log('üöÄ ÂºÄÂßãÂº∫ÂåñÈáçÊñ∞ËÆ°ÁÆó...');

        if (!data || data.length === 0) {
            console.log('‚ùå Êï∞ÊçÆ‰∏∫Á©∫ÔºåÊó†Ê≥ïËÆ°ÁÆó');
            return;
        }

        let totalDemandMeters = 0;
        let producedMeters = 0;
        let shippedMeters = 0;
        let validRecords = 0;
        let invalidRecords = 0;

        console.log('üìä ÈÄêÊù°Â§ÑÁêÜÊï∞ÊçÆ...');

        data.forEach((item, index) => {
            try {
                // ÊèêÂèñÈïøÂ∫¶
                let length = this.extractLengthFromSpec(item.spec);

                // Â¶ÇÊûúÊèêÂèñÂ§±Ë¥•ÔºåÂ∞ùËØïÂÖ∂‰ªñÊñπÊ≥ï
                if (length === 6000 && item.spec) {
                    // Â∞ùËØïÊõ¥ÂÆΩÊùæÁöÑÂåπÈÖç
                    const numbers = item.spec.match(/\d+/g);
                    if (numbers) {
                        for (const num of numbers) {
                            const n = parseInt(num);
                            if (n >= 1000 && n <= 20000) {
                                length = n;
                                console.log(`üîç Â§áÁî®ÊñπÊ≥ïËß£ÊûêÈïøÂ∫¶: ${item.spec} -> ${length}mm`);
                                break;
                            }
                        }
                    }
                }

                const planned = parseInt(item.planned) || 0;
                const produced = parseInt(item.produced) || 0;
                const shipped = parseInt(item.shipped) || 0;

                if (length > 0 && planned > 0) {
                    validRecords++;
                    const demandMeter = planned * length / 1000;
                    const producedMeter = produced * length / 1000;
                    const shippedMeter = shipped * length / 1000;

                    totalDemandMeters += demandMeter;
                    producedMeters += producedMeter;
                    shippedMeters += shippedMeter;

                    if (index < 3) { // ÊòæÁ§∫Ââç3Êù°ÁöÑËØ¶ÁªÜËÆ°ÁÆó
                        console.log(`‚úÖ Á¨¨${index + 1}Êù°: ${item.spec}`);
                        console.log(`   ÈïøÂ∫¶: ${length}mm, ËÆ°Âàí: ${planned}Ê†π, Â∑≤‰∫ß: ${produced}Ê†π`);
                        console.log(`   ÈúÄÊ±Ç: ${demandMeter.toFixed(1)}Á±≥, Â∑≤‰∫ß: ${producedMeter.toFixed(1)}Á±≥`);
                    }
                } else {
                    invalidRecords++;
                    if (index < 3) {
                        console.log(`‚ùå Á¨¨${index + 1}Êù°Êó†Êïà: ${item.spec}, ÈïøÂ∫¶=${length}, ËÆ°Âàí=${planned}`);
                    }
                }
            } catch (error) {
                console.error(`Â§ÑÁêÜÁ¨¨${index + 1}Êù°Êï∞ÊçÆÊó∂Âá∫Èîô:`, error);
                invalidRecords++;
            }
        });

        // Êõ¥Êñ∞ÁªüËÆ°Êï∞ÊçÆ
        this.data.totalDemandMeters = totalDemandMeters;
        this.data.producedMeters = producedMeters;

        // ‰ºòÂÖà‰ªéÂÆ¢Êà∑ÂèëË¥ßÁªüËÆ°Ëé∑ÂèñÂèëË¥ßÈáè
        let finalShippedMeters = shippedMeters;
        if (window.dataManager && typeof window.dataManager.calculateCustomerStats === 'function') {
            try {
                const customerStats = window.dataManager.calculateCustomerStats();
                const customerShippedMeters = customerStats.reduce((sum, customer) => {
                    return sum + (customer.totalMeters || 0);
                }, 0);
                if (customerShippedMeters > 0) {
                    finalShippedMeters = customerShippedMeters;
                    console.log(`üì¶ Âº∫ÂåñËÆ°ÁÆó‰ΩøÁî®ÂÆ¢Êà∑ÁªüËÆ°ÂèëË¥ßÈáè: ${finalShippedMeters.toFixed(1)}Á±≥`);
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Âº∫ÂåñËÆ°ÁÆó‰∏≠ÂÆ¢Êà∑ÁªüËÆ°Â§±Ë¥•Ôºå‰ΩøÁî®ÂéüËÆ°ÁÆóÁªìÊûú:', error);
            }
        }

        this.data.shippedMeters = finalShippedMeters;
        this.data.pendingMeters = totalDemandMeters - producedMeters;
        this.data.unshippedMeters = producedMeters - shippedMeters;

        // ËÆ°ÁÆóÂÆåÊàêÁéá
        this.data.completionRate = totalDemandMeters > 0 ?
            ((producedMeters / totalDemandMeters) * 100).toFixed(1) : 0;

        console.log('üìà Âº∫ÂåñËÆ°ÁÆóÂÆåÊàê:');
        console.log(`  ÊúâÊïàËÆ∞ÂΩï: ${validRecords} / ${data.length}`);
        console.log(`  Êó†ÊïàËÆ∞ÂΩï: ${invalidRecords}`);
        console.log(`  ÊÄªÈúÄÊ±ÇÈáè: ${totalDemandMeters.toFixed(1)}Á±≥`);
        console.log(`  Â∑≤Áîü‰∫ßÈáè: ${producedMeters.toFixed(1)}Á±≥`);
        console.log(`  Â∑≤ÂèëË¥ßÈáè: ${shippedMeters.toFixed(1)}Á±≥`);
        console.log(`  ÂÆåÊàêÁéá: ${this.data.completionRate}%`);
    }
    
    setupFilters() {
        // Áä∂ÊÄÅÁ≠õÈÄâÂ§çÈÄâÊ°Ü
        const statusCheckboxes = document.querySelectorAll('.checkbox-group input[type="checkbox"]');
        statusCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => this.applyFilters());
        });
        
        // ËßÑÊ†ºÂûãÂè∑‰∏ãÊãâÊ°Ü
        const specSelect = document.querySelector('.select-dropdown');
        if (specSelect) {
            specSelect.addEventListener('change', () => this.applyFilters());
        }
        
        // Â∑•Âú∞Âå∫Âüü‰∏ãÊãâÊ°Ü
        const areaSelects = document.querySelectorAll('.select-dropdown');
        areaSelects.forEach(select => {
            select.addEventListener('change', () => this.applyFilters());
        });
    }
    
    setupChartActions() {
        const chartBtns = document.querySelectorAll('.chart-btn');
        chartBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const icon = btn.querySelector('i');
                if (icon.classList.contains('fa-expand')) {
                    this.expandChart(btn.closest('.chart-card'));
                } else if (icon.classList.contains('fa-download')) {
                    this.downloadChart(btn.closest('.chart-card'));
                }
            });
        });
    }
    
    updateMetrics() {
        // Á¨¨‰∏ÄË°åÂç°ÁâáÔºöÊõ¥Êñ∞ÊÄªÈúÄÊ±ÇÈáèÔºàÁ±≥Âà∂Ôºâ
        const totalElement = document.querySelector('.metric-card.total .metric-value');
        if (totalElement) {
            this.animateNumber(totalElement, this.data.totalDemandMeters || 0, 1);
        }

        // Êõ¥Êñ∞Â∑≤Áîü‰∫ßÈáèÔºàÁ±≥Âà∂Ôºâ
        const producedElement = document.querySelector('.metric-card.produced .metric-value');
        if (producedElement) {
            this.animateNumber(producedElement, this.data.producedMeters || 0, 1);
        }

        // Êõ¥Êñ∞Êú™Áîü‰∫ßÈáèÔºàÁ±≥Âà∂Ôºâ
        const pendingElement = document.querySelector('.metric-card.pending .metric-value');
        if (pendingElement) {
            this.animateNumber(pendingElement, this.data.pendingMeters || 0, 1);
        }

        // Êõ¥Êñ∞Áîü‰∫ßËøõÂ∫¶
        const progressElement = document.querySelector('.metric-card.efficiency .metric-value');
        if (progressElement) {
            progressElement.textContent = `${this.data.completionRate}%`;
        }

        // Á¨¨‰∫åË°åÂç°ÁâáÔºöÊõ¥Êñ∞Â∑≤ÂèëË¥ßÈáèÔºàÁ±≥Âà∂Ôºâ- ‰ΩøÁî®Êñ∞ÁöÑÂç°ÁâáÁÆ°ÁêÜÂô®
        if (window.shippedCardManager && typeof window.shippedCardManager.forceUpdate === 'function') {
            window.shippedCardManager.forceUpdate();
        } else {
            // ÂÖºÂÆπÊóßÁöÑÊõ¥Êñ∞ÊñπÂºè
            const shippedElement = document.querySelector('.metric-card.shipped .metric-value');
            if (shippedElement) {
                this.animateNumber(shippedElement, this.data.shippedMeters || 0, 1);
            }
        }

        // Êõ¥Êñ∞Êú™ÂèëË¥ßÈáèÔºàÁ±≥Âà∂Ôºâ
        const unshippedElement = document.querySelector('.metric-card.unshipped .metric-value');
        if (unshippedElement) {
            this.animateNumber(unshippedElement, this.data.unshippedMeters || 0, 1);
        }

        // Êõ¥Êñ∞ÂéüÊùêÈááË¥≠ÔºàÂê®Ôºâ
        const materialElement = document.querySelector('.metric-card.material .metric-value');
        if (materialElement) {
            this.animateNumber(materialElement, this.data.materialTons || 0, 1);
        }

        // Êõ¥Êñ∞Â∫ìÂ≠òÁä∂ÊÄÅ
        const inventoryStatusElement = document.querySelector('.metric-card.inventory .metric-value');
        const inventoryQuantityElement = document.querySelector('#inventoryQuantity');
        if (inventoryStatusElement && this.data.inventoryStatus) {
            inventoryStatusElement.textContent = this.data.inventoryStatus.status;
            // ÁßªÈô§Ëá™ÂÆö‰πâÈ¢úËâ≤Ôºå‰ΩøÁî®Áªü‰∏ÄÁöÑÊñáÂ≠óÈ¢úËâ≤
            inventoryStatusElement.style.color = '';
        }
        if (inventoryQuantityElement) {
            this.animateNumber(inventoryQuantityElement, this.data.unshippedMeters || 0, 1);
        }

        // Êõ¥Êñ∞ÂÆåÊàêÁéá
        const completionElements = document.querySelectorAll('.metric-subtitle');
        completionElements.forEach(element => {
            if (element.textContent.includes('ÂÆåÊàêÁéá')) {
                element.textContent = `ÂÆåÊàêÁéá: ${this.data.completionRate}%`;
            }
            if (element.textContent.includes('ÂæÖÂÆåÊàê')) {
                element.textContent = `ÂæÖÂÆåÊàê: ${(100 - this.data.completionRate).toFixed(1)}%`;
            }
        });

        // Êõ¥Êñ∞ËøõÂ∫¶ÁéØ
        this.updateProgressRing();
    }
    
    animateNumber(element, targetValue, decimals = 0) {
        const startValue = parseFloat(element.textContent.replace(/,/g, '')) || 0;
        const duration = 1000; // 1ÁßíÂä®Áîª
        const startTime = performance.now();
        
        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // ‰ΩøÁî®ÁºìÂä®ÂáΩÊï∞
            const easeOutQuart = 1 - Math.pow(1 - progress, 4);
            const currentValue = startValue + (targetValue - startValue) * easeOutQuart;
            
            element.textContent = this.formatNumber(currentValue, decimals);
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };
        
        requestAnimationFrame(animate);
    }
    
    formatNumber(num, decimals = 0) {
        return new Intl.NumberFormat('zh-CN', {
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        }).format(num);
    }
    
    updateProgressRing() {
        const progressCircle = document.querySelector('.progress-ring-circle');
        const progressText = document.querySelector('.progress-text');
        
        if (progressCircle && progressText) {
            const radius = 25;
            const circumference = 2 * Math.PI * radius;
            const offset = circumference - (this.data.completionRate / 100) * circumference;
            
            progressCircle.style.strokeDasharray = circumference;
            progressCircle.style.strokeDashoffset = offset;
            progressText.textContent = `${this.data.completionRate}%`;
        }
    }
    
    updateLastUpdateTime() {
        const lastUpdateElement = document.getElementById('lastUpdate');
        if (lastUpdateElement) {
            const now = new Date();
            const timeString = now.toLocaleString('zh-CN', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            lastUpdateElement.textContent = timeString;
        }
    }
    
    refreshData() {
        console.log('üîÑ ÂºÄÂßãÊâãÂä®Âà∑Êñ∞Êï∞ÊçÆÔºà‰∏çÂà∑Êñ∞È°µÈù¢Ôºâ...');

        const refreshBtn = document.getElementById('refreshBtn');
        if (!refreshBtn) {
            console.error('‚ùå Êú™ÊâæÂà∞Âà∑Êñ∞ÊåâÈíÆ');
            return;
        }

        const icon = refreshBtn.querySelector('i');
        if (!icon) {
            console.error('‚ùå Êú™ÊâæÂà∞Âà∑Êñ∞ÊåâÈíÆÂõæÊ†á');
            return;
        }

        // Èò≤Ê≠¢È°µÈù¢Âà∑Êñ∞ - Á°Æ‰øùÊ≤°Êúâ‰ªª‰ΩïÂèØËÉΩËß¶ÂèëÈ°µÈù¢Âà∑Êñ∞ÁöÑ‰ª£Á†Å
        console.log('üõ°Ô∏è Èò≤Ê≠¢È°µÈù¢Âà∑Êñ∞‰øùÊä§Â∑≤ÊøÄÊ¥ª');

        // Ê∑ªÂä†Âä†ËΩΩÁä∂ÊÄÅ
        icon.classList.add('fa-spin');
        refreshBtn.disabled = true;
        refreshBtn.style.opacity = '0.7';

        console.log('üîÑ ÊâãÂä®Âà∑Êñ∞Êï∞ÊçÆÔºà‰ªÖÊõ¥Êñ∞Êï∞ÊçÆÔºå‰∏çÂà∑Êñ∞È°µÈù¢Ôºâ...');

        // Âº∫Âà∂ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
        if (window.dataManager) {
            console.log('üìä ÈáçÊñ∞Âä†ËΩΩÊú¨Âú∞Â≠òÂÇ®Êï∞ÊçÆ...');
            try {
                window.dataManager.loadFromLocalStorage();
                console.log('‚úÖ ÈáçÊñ∞Âä†ËΩΩÂêéÊï∞ÊçÆÊù°Êï∞:', window.dataManager.data?.length || 0);
            } catch (error) {
                console.error('‚ùå ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', error);
            }
        } else {
            console.warn('‚ö†Ô∏è dataManager ‰∏çÂ≠òÂú®');
        }

        // ‰ªéÊï∞ÊçÆÁÆ°ÁêÜÂô®Âà∑Êñ∞ÁúüÂÆûÊï∞ÊçÆ
        setTimeout(() => {
            try {
                console.log('üìà Êõ¥Êñ∞ÁïåÈù¢Êï∞ÊçÆ...');

                // ‰ªéÊï∞ÊçÆÁÆ°ÁêÜÂô®Ëé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆ
                this.updateMetricsFromDataManager();
                this.updateLastUpdateTime();
                this.updateCharts();

                console.log('‚úÖ Êï∞ÊçÆÂà∑Êñ∞ÂÆåÊàêÔºàÈ°µÈù¢Êú™Âà∑Êñ∞Ôºâ');
            } catch (error) {
                console.error('‚ùå Êõ¥Êñ∞ÁïåÈù¢Êï∞ÊçÆÂ§±Ë¥•:', error);
            } finally {
                // ÁßªÈô§Âä†ËΩΩÁä∂ÊÄÅ
                icon.classList.remove('fa-spin');
                refreshBtn.disabled = false;
                refreshBtn.style.opacity = '1';

                // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
                this.showNotification('Êï∞ÊçÆÂ∑≤Êõ¥Êñ∞ÔºàÈ°µÈù¢Êú™Âà∑Êñ∞Ôºâ', 'success');

                console.log('üéâ Âà∑Êñ∞Êï∞ÊçÆÊìç‰ΩúÂÆåÊàêÔºåÈ°µÈù¢‰øùÊåÅ‰∏çÂèò');
            }
        }, 1000); // ÂáèÂ∞ëÂª∂ËøüÊó∂Èó¥
    }
    
    applyFilters() {
        // Ëé∑ÂèñÂΩìÂâçÁ≠õÈÄâÊù°‰ª∂
        const statusFilters = Array.from(document.querySelectorAll('.checkbox-group input[type="checkbox"]:checked'))
            .map(cb => cb.parentElement.textContent.trim());
        
        const specFilter = document.querySelector('.select-dropdown').value;
        
        console.log('Â∫îÁî®Á≠õÈÄâÊù°‰ª∂:', { statusFilters, specFilter });
        
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑÁ≠õÈÄâÈÄªËæë
        this.updateCharts();
        this.showNotification('Á≠õÈÄâÊù°‰ª∂Â∑≤Â∫îÁî®', 'info');
    }
    
    expandChart(chartCard) {
        // ÂÆûÁé∞ÂõæË°®ÂÖ®Â±èÂäüËÉΩ
        if (chartCard.classList.contains('expanded')) {
            chartCard.classList.remove('expanded');
            document.body.classList.remove('chart-expanded');
        } else {
            chartCard.classList.add('expanded');
            document.body.classList.add('chart-expanded');
        }
        
        // ÈáçÊñ∞Ë∞ÉÊï¥ÂõæË°®Â§ßÂ∞è
        setTimeout(() => {
            this.resizeCharts();
        }, 300);
    }
    
    downloadChart(chartCard) {
        const canvas = chartCard.querySelector('canvas');
        if (canvas) {
            const link = document.createElement('a');
            link.download = `chart-${Date.now()}.png`;
            link.href = canvas.toDataURL();
            link.click();
            
            this.showNotification('ÂõæË°®Â∑≤‰∏ãËΩΩ', 'success');
        }
    }
    
    resizeCharts() {
        Object.values(this.charts).forEach(chart => {
            if (chart && typeof chart.resize === 'function') {
                chart.resize();
            }
        });
    }
    
    updateCharts() {
        // Êõ¥Êñ∞ÊâÄÊúâÂõæË°®Êï∞ÊçÆ
        if (this.charts && this.charts.productionChart) {
            this.updateProductionChart();
        }
        if (this.charts && this.charts.shippingChart) {
            this.updateShippingChart();
        }
        if (this.charts && this.charts.specChart) {
            this.updateSpecChart();
        }
        if (this.charts && this.charts.areaChart) {
            this.updateAreaChart();
        }
    }
    
    startAutoRefresh() {
        // ÊØè5ÂàÜÈíüËá™Âä®Âà∑Êñ∞‰∏ÄÊ¨°Êï∞ÊçÆÊòæÁ§∫
        this.refreshInterval = setInterval(() => {
            this.updateMetricsFromDataManager();
            this.updateLastUpdateTime();
        }, 5 * 60 * 1000);
    }

    // ÂÆöÊúüÊ£ÄÊü•Êï∞ÊçÆÁä∂ÊÄÅ
    startDataCheck() {
        // ÊØè10ÁßíÊ£ÄÊü•‰∏ÄÊ¨°Êï∞ÊçÆÁä∂ÊÄÅ
        this.dataCheckInterval = setInterval(() => {
            this.checkDataStatus();
        }, 10 * 1000);
    }

    // Ê£ÄÊü•Êï∞ÊçÆÁä∂ÊÄÅÔºàÂ¢ûÂº∫ÁâàÊú¨Ôºâ- ‰øÆÂ§çÂèëË¥ßÈáèÈáçÁΩÆÈóÆÈ¢ò
    checkDataStatus() {
        if (!window.dataManager) return;

        const currentDataLength = window.dataManager.data ? window.dataManager.data.length : 0;
        const currentMetrics = this.data.totalDemandMeters || 0;
        const currentProduced = this.data.producedMeters || 0;
        const currentShipped = this.data.shippedMeters || 0;

        // ËØ¶ÁªÜÁöÑÊï∞ÊçÆÁä∂ÊÄÅÊ£ÄÊü•
        const hasData = currentDataLength > 0;
        const hasMetrics = currentMetrics > 0 || currentProduced > 0;

        // ‰øÆÂ§çÔºö‰∏çË¶ÅÂõ†‰∏∫ÂèëË¥ßÈáè‰∏∫0Â∞±Âº∫Âà∂Êõ¥Êñ∞ÔºåÂèëË¥ßÈáèÂèØËÉΩÁ°ÆÂÆû‰∏∫0
        // Âè™ÊúâÂΩìÊÄªÈúÄÊ±ÇÈáèÂíåÂ∑≤Áîü‰∫ßÈáèÈÉΩ‰∏∫0‰ΩÜÊúâÊï∞ÊçÆÊó∂ÊâçÂº∫Âà∂Êõ¥Êñ∞
        if (hasData && currentMetrics === 0 && currentProduced === 0) {
            console.log('üîç Ê£ÄÊµãÂà∞Áîü‰∫ßÊï∞ÊçÆ‰∏çÂêåÊ≠•ÔºåÂº∫Âà∂Êõ¥Êñ∞...');
            console.log('Êï∞ÊçÆÁä∂ÊÄÅ:', {
                dataLength: currentDataLength,
                totalDemandMeters: currentMetrics,
                producedMeters: currentProduced,
                shippedMeters: currentShipped
            });

            // Âº∫Âà∂ÈáçÊñ∞ËÆ°ÁÆó
            this.updateMetricsFromDataManager();

            // Â¶ÇÊûúËøòÊòØ0ÔºåÂÜçÊ¨°Â∞ùËØï
            setTimeout(() => {
                const newMetrics = this.data.totalDemandMeters || 0;
                const newProduced = this.data.producedMeters || 0;
                if (currentDataLength > 0 && newMetrics === 0 && newProduced === 0) {
                    console.log('‚ö†Ô∏è Á¨¨‰∫åÊ¨°Ê£ÄÊü•‰ªçÁÑ∂‰∏çÂêåÊ≠•ÔºåÊ∑±Â∫¶‰øÆÂ§ç...');
                    this.deepDataSync();
                }
            }, 2000);
        }

        // ÂçïÁã¨Ê£ÄÊü•ÂèëË¥ßÈáèÂºÇÂ∏∏ÊÉÖÂÜµÔºàÂèëË¥ßÈáèÂ§ß‰∫éÂ∑≤Áîü‰∫ßÈáèÔºâ
        if (currentShipped > currentProduced && currentProduced > 0) {
            console.log('‚ö†Ô∏è Ê£ÄÊµãÂà∞ÂèëË¥ßÈáèÂºÇÂ∏∏ÔºàÂ§ß‰∫éÂ∑≤Áîü‰∫ßÈáèÔºâÔºåÈáçÊñ∞ËÆ°ÁÆóÂèëË¥ßÈáè...');
            this.recalculateShippingOnly();
        }
    }

    // ‰ªÖÈáçÊñ∞ËÆ°ÁÆóÂèëË¥ßÈáèÔºå‰∏çÂΩ±ÂìçÂÖ∂‰ªñÊï∞ÊçÆ
    recalculateShippingOnly() {
        console.log('üîÑ ‰ªÖÈáçÊñ∞ËÆ°ÁÆóÂèëË¥ßÈáè...');

        let shippedMeters = 0;

        // ÊñπÊ≥ï1Ôºö‰ªéÂÆ¢Êà∑ÁªüËÆ°ËÆ°ÁÆó
        if (window.dataManager && typeof window.dataManager.calculateCustomerStats === 'function') {
            try {
                const customerStats = window.dataManager.calculateCustomerStats();
                shippedMeters = customerStats.reduce((sum, customer) => {
                    return sum + (customer.totalMeters || 0);
                }, 0);

                if (shippedMeters > 0) {
                    console.log(`üì¶ ‰ªéÂÆ¢Êà∑ÁªüËÆ°ÈáçÊñ∞ËÆ°ÁÆóÂèëË¥ßÈáè: ${shippedMeters.toFixed(1)}Á±≥`);
                }
            } catch (error) {
                console.error('‚ùå ÂÆ¢Êà∑ÁªüËÆ°ËÆ°ÁÆóÂ§±Ë¥•:', error);
            }
        }

        // ÊñπÊ≥ï2ÔºöÂ¶ÇÊûúÂÆ¢Êà∑ÁªüËÆ°‰∏∫0Ôºå‰ªéÁîü‰∫ßÊï∞ÊçÆËÆ°ÁÆó
        if (shippedMeters === 0 && window.dataManager && window.dataManager.data) {
            shippedMeters = window.dataManager.data.reduce((sum, item) => {
                const length = this.extractLengthFromSpec(item.spec);
                const shipped = item.shipped || 0;
                return sum + (shipped * length / 1000);
            }, 0);
            console.log(`üì¶ ‰ªéÁîü‰∫ßÊï∞ÊçÆÈáçÊñ∞ËÆ°ÁÆóÂèëË¥ßÈáè: ${shippedMeters.toFixed(1)}Á±≥`);
        }

        // Êõ¥Êñ∞ÂèëË¥ßÈáèÂíåÊú™ÂèëË¥ßÈáè
        this.data.shippedMeters = shippedMeters;
        this.data.unshippedMeters = Math.max(0, this.data.producedMeters - shippedMeters);

        // ‰ªÖÊõ¥Êñ∞ÂèëË¥ßÁõ∏ÂÖ≥ÁöÑÁïåÈù¢ÂÖÉÁ¥†
        const shippedElement = document.querySelector('.metric-card.shipped .metric-value');
        if (shippedElement) {
            this.animateNumber(shippedElement, shippedMeters, 1);
        }

        const unshippedElement = document.querySelector('.metric-card.unshipped .metric-value');
        if (unshippedElement) {
            this.animateNumber(unshippedElement, this.data.unshippedMeters, 1);
        }

        console.log(`‚úÖ ÂèëË¥ßÈáèÈáçÊñ∞ËÆ°ÁÆóÂÆåÊàê: ${shippedMeters.toFixed(1)}Á±≥`);
    }

    // ËÆæÁΩÆÂç°ÁâáÁÇπÂáª‰∫ã‰ª∂
    setupCardClickEvents() {
        console.log('üñ±Ô∏è ËÆæÁΩÆÂç°ÁâáÁÇπÂáª‰∫ã‰ª∂...');

        // Â∑≤ÂèëË¥ßÈáèÂç°ÁâáÁÇπÂáª‰∫ã‰ª∂
        const shippedCard = document.querySelector('.metric-card.shipped');
        if (shippedCard) {
            shippedCard.style.cursor = 'pointer';
            shippedCard.title = 'ÁÇπÂáªÊü•ÁúãÂÆ¢Êà∑ÂèëË¥ßÊòéÁªÜ';

            shippedCard.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üñ±Ô∏è Â∑≤ÂèëË¥ßÈáèÂç°ÁâáË¢´ÁÇπÂáª');
                this.openShippingDetailsModal();
            });

            console.log('‚úÖ Â∑≤ÂèëË¥ßÈáèÂç°ÁâáÁÇπÂáª‰∫ã‰ª∂Â∑≤ÁªëÂÆö');
        } else {
            console.error('‚ùå Êú™ÊâæÂà∞Â∑≤ÂèëË¥ßÈáèÂç°Áâá');
        }
    }

    // ‰∏ìÈó®Êõ¥Êñ∞Â∑≤ÂèëË¥ßÈáèÂç°Áâá
    updateShippedMetersCard() {
        console.log('üöö Êõ¥Êñ∞Â∑≤ÂèëË¥ßÈáèÂç°Áâá...');

        let shippedMeters = 0;
        let customerCount = 0;
        let dataSource = '';

        // ÊñπÊ≥ï1Ôºö‰ªéÂÆ¢Êà∑ÁªüËÆ°Ëé∑Âèñ
        if (window.dataManager && typeof window.dataManager.calculateCustomerStats === 'function') {
            try {
                const customerStats = window.dataManager.calculateCustomerStats();
                const customersWithShipping = customerStats.filter(c => c.totalMeters > 0);

                shippedMeters = customerStats.reduce((sum, customer) => {
                    return sum + (customer.totalMeters || 0);
                }, 0);

                customerCount = customersWithShipping.length;
                dataSource = 'ÂÆ¢Êà∑ÁªüËÆ°';

                console.log(`üì¶ ‰ªéÂÆ¢Êà∑ÁªüËÆ°Ëé∑Âèñ: ${shippedMeters.toFixed(1)}Á±≥, ${customerCount}‰∏™ÂÆ¢Êà∑`);

                if (shippedMeters > 0) {
                    console.log('üì¶ ÂÆ¢Êà∑ÂèëË¥ßËØ¶ÊÉÖ:');
                    customersWithShipping.slice(0, 3).forEach(customer => {
                        console.log(`  - ${customer.customerName}: ${customer.totalMeters.toFixed(1)}Á±≥`);
                    });
                }
            } catch (error) {
                console.error('‚ùå ÂÆ¢Êà∑ÁªüËÆ°ËÆ°ÁÆóÂ§±Ë¥•:', error);
            }
        }

        // ÊñπÊ≥ï2Ôºö‰ªéÂèëË¥ßÂéÜÂè≤Ëé∑Âèñ
        if (shippedMeters === 0 && window.dataManager?.shippingHistory) {
            const shippingHistory = window.dataManager.shippingHistory;
            if (shippingHistory.length > 0) {
                shippedMeters = shippingHistory.reduce((sum, record) => {
                    return sum + (record.totalMeters || 0);
                }, 0);

                const uniqueCustomers = new Set(shippingHistory.map(r => r.customerName));
                customerCount = uniqueCustomers.size;
                dataSource = 'ÂèëË¥ßÂéÜÂè≤';

                console.log(`üì¶ ‰ªéÂèëË¥ßÂéÜÂè≤Ëé∑Âèñ: ${shippedMeters.toFixed(1)}Á±≥, ${customerCount}‰∏™ÂÆ¢Êà∑`);
            }
        }

        // Êõ¥Êñ∞Âç°ÁâáÊòæÁ§∫
        const shippedValueElement = document.getElementById('shippedMetersValue');
        const customerCountElement = document.getElementById('shippedCustomerCount');

        if (shippedValueElement) {
            // ‰ΩøÁî®Âä®ÁîªÊõ¥Êñ∞Êï∞Â≠ó
            this.animateNumber(shippedValueElement, shippedMeters, 1);
        }

        if (customerCountElement) {
            customerCountElement.textContent = customerCount;
        }

        // Êõ¥Êñ∞ÂÜÖÈÉ®Êï∞ÊçÆ
        this.data.shippedMeters = shippedMeters;

        console.log(`‚úÖ Â∑≤ÂèëË¥ßÈáèÂç°ÁâáÊõ¥Êñ∞ÂÆåÊàê: ${shippedMeters.toFixed(1)}Á±≥ (${dataSource})`);

        return shippedMeters;
    }

    // ÊâìÂºÄÂèëË¥ßÊòéÁªÜÊ®°ÊÄÅÊ°Ü
    openShippingDetailsModal() {
        console.log('üìä ÊâìÂºÄÂèëË¥ßÊòéÁªÜÊ®°ÊÄÅÊ°Ü...');

        // ËÆ°ÁÆóÂêÑÂéÇÂÆ∂ÂèëË¥ßÁªüËÆ°
        const manufacturerStats = this.calculateManufacturerShippingStats();

        // ÂàõÂª∫Ê®°ÊÄÅÊ°Ü
        this.createShippingDetailsModal(manufacturerStats);
    }

    // ËÆ°ÁÆóÂÆ¢Êà∑ÂèëË¥ßÁªüËÆ° - ÁÆÄÂåñÁâàÊú¨
    calculateManufacturerShippingStats() {
        console.log('üìä ËÆ°ÁÆóÂÆ¢Êà∑ÂèëË¥ßÁªüËÆ°ÔºàÁÆÄÂåñÁâàÔºâ...');

        let totalShippedMeters = 0;
        const customers = [];

        // Áõ¥Êé•‰ªéÂÆ¢Êà∑ÁªüËÆ°Ëé∑ÂèñÊï∞ÊçÆ
        if (window.dataManager && typeof window.dataManager.calculateCustomerStats === 'function') {
            try {
                const customerStats = window.dataManager.calculateCustomerStats();

                customerStats.forEach(customer => {
                    if (customer.totalMeters > 0) {
                        customers.push({
                            name: customer.customerName,
                            totalMeters: customer.totalMeters,
                            percentage: 0 // Á®çÂêéËÆ°ÁÆó
                        });
                        totalShippedMeters += customer.totalMeters;
                    }
                });

                // ËÆ°ÁÆóÂç†ÊØî
                customers.forEach(customer => {
                    customer.percentage = totalShippedMeters > 0 ? (customer.totalMeters / totalShippedMeters * 100) : 0;
                });

                // ÊåâÂèëË¥ßÈáèÊéíÂ∫è
                customers.sort((a, b) => b.totalMeters - a.totalMeters);

                console.log('üìä ÂÆ¢Êà∑ÂèëË¥ßÁªüËÆ°ÁªìÊûú:', {
                    ÂÆ¢Êà∑Êï∞Èáè: customers.length,
                    ÊÄªÂèëË¥ßÈáè: `${totalShippedMeters.toFixed(1)}Á±≥`
                });

            } catch (error) {
                console.error('‚ùå ÂÆ¢Êà∑ÁªüËÆ°ËÆ°ÁÆóÂ§±Ë¥•:', error);
            }
        }

        return {
            customers: customers,
            totalMeters: totalShippedMeters
        };
    }

    // ‰ªéËßÑÊ†º‰∏≠ÊèêÂèñÂéÇÂÆ∂‰ø°ÊÅØ
    extractManufacturerFromSpec(spec) {
        if (!spec) return null;

        // Â∏∏ËßÅÁöÑÂéÇÂÆ∂Ê†áËØÜÊ®°Âºè
        const patterns = [
            /ÂéÇÂÆ∂[Ôºö:]\s*([^Ôºå,\s]+)/,     // ÂéÇÂÆ∂ÔºöXXX
            /Áîü‰∫ßÂéÇÂÆ∂[Ôºö:]\s*([^Ôºå,\s]+)/, // Áîü‰∫ßÂéÇÂÆ∂ÔºöXXX
            /Âà∂ÈÄ†ÂïÜ[Ôºö:]\s*([^Ôºå,\s]+)/,   // Âà∂ÈÄ†ÂïÜÔºöXXX
            /‰æõÂ∫îÂïÜ[Ôºö:]\s*([^Ôºå,\s]+)/,   // ‰æõÂ∫îÂïÜÔºöXXX
            /([^-\s]+)ÂéÇ/,                // XXXÂéÇ
            /([^-\s]+)ÂÖ¨Âè∏/,              // XXXÂÖ¨Âè∏
            /([^-\s]+)ÈõÜÂõ¢/               // XXXÈõÜÂõ¢
        ];

        for (let pattern of patterns) {
            const match = spec.match(pattern);
            if (match) {
                return match[1].trim();
            }
        }

        return null;
    }

    // ÂàõÂª∫ÂèëË¥ßÊòéÁªÜÊ®°ÊÄÅÊ°Ü - ÁÆÄÊ¥ÅÁâàÊú¨
    createShippingDetailsModal(stats) {
        console.log('üé® ÂàõÂª∫ÂèëË¥ßÊòéÁªÜÊ®°ÊÄÅÊ°ÜÔºàÁÆÄÊ¥ÅÁâàÔºâ...');

        // ÁßªÈô§Â∑≤Â≠òÂú®ÁöÑÊ®°ÊÄÅÊ°Ü
        const existingModal = document.getElementById('shippingDetailsModal');
        if (existingModal) {
            existingModal.remove();
        }

        // ÂàõÂª∫ÁÆÄÊ¥ÅÁöÑÊ®°ÊÄÅÊ°ÜHTML
        const modalHTML = `
            <div class="modal" id="shippingDetailsModal">
                <div class="modal-content" style="max-width: 700px; width: 90%;">
                    <div class="modal-header">
                        <h3>
                            <i class="fas fa-truck"></i>
                            ÂÆ¢Êà∑ÂèëË¥ßÊòéÁªÜ
                        </h3>
                        <button class="modal-close" id="closeShippingDetailsModal">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <!-- ÁÆÄÊ¥ÅÁöÑÊÄª‰ΩìÁªüËÆ° -->
                        <div class="shipping-summary-simple">
                            <div class="summary-item">
                                <span class="label">ÊÄªÂèëË¥ßÈáè:</span>
                                <span class="value">${stats.totalMeters.toFixed(1)} Á±≥</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">ÂÆ¢Êà∑Êï∞Èáè:</span>
                                <span class="value">${stats.customers.length} ÂÆ∂</span>
                            </div>
                        </div>

                        <!-- ÂÆ¢Êà∑ÂèëË¥ßÊòéÁªÜË°®Ê†º -->
                        <div class="customer-details">
                            <div class="table-container">
                                <table class="customer-table">
                                    <thead>
                                        <tr>
                                            <th>ÊéíÂêç</th>
                                            <th>ÂÆ¢Êà∑ÂêçÁß∞</th>
                                            <th>ÂèëË¥ßÈáè(Á±≥)</th>
                                            <th>Âç†ÊØî</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${this.generateCustomerTableRows(stats.customers)}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="exportShippingDetails">
                            <i class="fas fa-download"></i>
                            ÂØºÂá∫ÊòéÁªÜ
                        </button>
                        <button type="button" class="btn btn-primary" id="closeShippingDetailsBtn">
                            ÂÖ≥Èó≠
                        </button>
                    </div>
                </div>
            </div>
        `;

        // Ê∑ªÂä†Ê†∑Âºè
        const modalStyles = `
            <style id="shippingDetailsModalStyles">
                #shippingDetailsModal .modal-content {
                    max-height: 90vh;
                    overflow-y: auto;
                }

                .shipping-summary {
                    display: flex;
                    gap: 20px;
                    margin-bottom: 30px;
                    flex-wrap: wrap;
                }

                .summary-card {
                    flex: 1;
                    min-width: 150px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 20px;
                    border-radius: 12px;
                    text-align: center;
                    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                }

                .summary-label {
                    font-size: 14px;
                    opacity: 0.9;
                    margin-bottom: 8px;
                }

                .summary-value {
                    font-size: 24px;
                    font-weight: bold;
                }

                .manufacturer-details {
                    margin-bottom: 30px;
                }

                .manufacturer-details h4 {
                    margin-bottom: 15px;
                    color: #333;
                    border-bottom: 2px solid #e5e7eb;
                    padding-bottom: 8px;
                }

                .table-container {
                    max-height: 400px;
                    overflow-y: auto;
                    border: 1px solid #e5e7eb;
                    border-radius: 8px;
                }

                .customer-table {
                    width: 100%;
                    border-collapse: collapse;
                    font-size: 14px;
                }

                .customer-table th {
                    background: #f8fafc;
                    padding: 12px;
                    text-align: left;
                    font-weight: 600;
                    border-bottom: 2px solid #e5e7eb;
                    position: sticky;
                    top: 0;
                    z-index: 10;
                }

                .customer-table td {
                    padding: 12px;
                    border-bottom: 1px solid #f1f5f9;
                }

                .customer-table tbody tr:hover {
                    background: #f8fafc;
                }

                .shipping-summary-simple {
                    display: flex;
                    justify-content: space-around;
                    background: #f8f9fa;
                    padding: 16px;
                    border-radius: 8px;
                    margin-bottom: 20px;
                }

                .summary-item {
                    text-align: center;
                }

                .summary-item .label {
                    font-size: 14px;
                    color: #666;
                    display: block;
                    margin-bottom: 5px;
                }

                .summary-item .value {
                    font-size: 18px;
                    font-weight: bold;
                    color: #333;
                }

                .customer-details {
                    margin-top: 20px;
                }

                .rank-badge {
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    width: 24px;
                    height: 24px;
                    border-radius: 50%;
                    color: white;
                    font-weight: bold;
                    font-size: 12px;
                }

                .rank-1 { background: #ffd700; color: #333; }
                .rank-2 { background: #c0c0c0; color: #333; }
                .rank-3 { background: #cd7f32; color: white; }
                .rank-other { background: #6b7280; }

                .percentage-bar {
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }

                .percentage-fill {
                    height: 6px;
                    background: #3b82f6;
                    border-radius: 3px;
                    min-width: 2px;
                }

                .percentage-bg {
                    width: 60px;
                    height: 6px;
                    background: #e5e7eb;
                    border-radius: 3px;
                    overflow: hidden;
                }

                .manufacturer-chart {
                    margin-top: 20px;
                }

                .manufacturer-chart h4 {
                    margin-bottom: 15px;
                    color: #333;
                }

                .detail-btn {
                    background: #3b82f6;
                    color: white;
                    border: none;
                    padding: 4px 8px;
                    border-radius: 4px;
                    font-size: 12px;
                    cursor: pointer;
                    transition: background 0.2s;
                }

                .detail-btn:hover {
                    background: #2563eb;
                }

                @media (max-width: 768px) {
                    .shipping-summary-simple {
                        flex-direction: column;
                        gap: 10px;
                    }

                    .customer-table {
                        font-size: 12px;
                    }

                    .customer-table th,
                    .customer-table td {
                        padding: 8px;
                    }
                }
            </style>
        `;

        // Ê∑ªÂä†Âà∞È°µÈù¢
        document.head.insertAdjacentHTML('beforeend', modalStyles);
        document.body.insertAdjacentHTML('beforeend', modalHTML);

        // ÊòæÁ§∫Ê®°ÊÄÅÊ°Ü
        const modal = document.getElementById('shippingDetailsModal');
        modal.classList.add('active');

        // ÁªëÂÆö‰∫ã‰ª∂
        this.bindShippingDetailsEvents(stats);

        console.log('‚úÖ ÂèëË¥ßÊòéÁªÜÊ®°ÊÄÅÊ°ÜÂàõÂª∫ÂÆåÊàê');
    }

    // ÁîüÊàêÂÆ¢Êà∑Ë°®Ê†ºË°å - ÁÆÄÊ¥ÅÁâàÊú¨
    generateCustomerTableRows(customers) {
        return customers.map((customer, index) => {
            const rank = index + 1;
            const rankClass = rank === 1 ? 'rank-1' : rank === 2 ? 'rank-2' : rank === 3 ? 'rank-3' : 'rank-other';

            return `
                <tr>
                    <td>
                        <span class="rank-badge ${rankClass}">${rank}</span>
                    </td>
                    <td>
                        <strong>${customer.name}</strong>
                    </td>
                    <td>
                        <strong>${customer.totalMeters.toFixed(1)}</strong> Á±≥
                    </td>
                    <td>
                        <div class="percentage-bar">
                            <div class="percentage-bg">
                                <div class="percentage-fill" style="width: ${customer.percentage}%"></div>
                            </div>
                            <span>${customer.percentage.toFixed(1)}%</span>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
    }

    // ÁªëÂÆöÂèëË¥ßÊòéÁªÜÊ®°ÊÄÅÊ°Ü‰∫ã‰ª∂
    bindShippingDetailsEvents(stats) {
        // ÂÖ≥Èó≠ÊåâÈíÆ
        const closeBtn = document.getElementById('closeShippingDetailsModal');
        const closeBtn2 = document.getElementById('closeShippingDetailsBtn');

        const closeModal = () => {
            const modal = document.getElementById('shippingDetailsModal');
            const styles = document.getElementById('shippingDetailsModalStyles');
            if (modal) modal.remove();
            if (styles) styles.remove();
        };

        if (closeBtn) closeBtn.addEventListener('click', closeModal);
        if (closeBtn2) closeBtn2.addEventListener('click', closeModal);

        // ÁÇπÂáªËÉåÊôØÂÖ≥Èó≠
        const modal = document.getElementById('shippingDetailsModal');
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) closeModal();
            });
        }

        // ÂØºÂá∫ÊåâÈíÆ
        const exportBtn = document.getElementById('exportShippingDetails');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                this.exportShippingDetails(stats);
            });
        }

        // ESCÈîÆÂÖ≥Èó≠
        const handleEsc = (e) => {
            if (e.key === 'Escape') {
                closeModal();
                document.removeEventListener('keydown', handleEsc);
            }
        };
        document.addEventListener('keydown', handleEsc);
    }

    // ÊòæÁ§∫ÂéÇÂÆ∂ËØ¶ÁªÜ‰ø°ÊÅØ
    showManufacturerDetails(manufacturerName) {
        console.log(`üìä ÊòæÁ§∫ÂéÇÂÆ∂ËØ¶ÁªÜ‰ø°ÊÅØ: ${manufacturerName}`);

        // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞ÊòæÁ§∫ÁâπÂÆöÂéÇÂÆ∂ÁöÑËØ¶ÁªÜÂèëË¥ßËÆ∞ÂΩï
        // ÊöÇÊó∂ÊòæÁ§∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊèêÁ§∫
        this.showNotification(`Ê≠£Âú®Âä†ËΩΩ ${manufacturerName} ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ...`, 'info');

        // TODO: ÂÆûÁé∞ËØ¶ÁªÜ‰ø°ÊÅØÂ±ïÁ§∫
    }

    // ÂØºÂá∫ÂèëË¥ßÊòéÁªÜ - ÂÆ¢Êà∑ÁâàÊú¨
    exportShippingDetails(stats) {
        console.log('üì• ÂØºÂá∫ÂÆ¢Êà∑ÂèëË¥ßÊòéÁªÜ...');

        try {
            // ÂáÜÂ§áÂØºÂá∫Êï∞ÊçÆ
            const exportData = [
                ['ÂÆ¢Êà∑ÂèëË¥ßÊòéÁªÜÊä•Ë°®'],
                ['ÁîüÊàêÊó∂Èó¥:', new Date().toLocaleString()],
                [''],
                ['ÊÄª‰ΩìÁªüËÆ°'],
                ['ÊÄªÂèëË¥ßÈáè(Á±≥)', stats.totalMeters.toFixed(1)],
                ['ÂÆ¢Êà∑Êï∞Èáè', stats.customers.length],
                [''],
                ['ÂÆ¢Êà∑ÊòéÁªÜ'],
                ['ÊéíÂêç', 'ÂÆ¢Êà∑ÂêçÁß∞', 'ÂèëË¥ßÈáè(Á±≥)', 'Âç†ÊØî(%)']
            ];

            // Ê∑ªÂä†ÂÆ¢Êà∑Êï∞ÊçÆ
            stats.customers.forEach((customer, index) => {
                exportData.push([
                    index + 1,
                    customer.name,
                    customer.totalMeters.toFixed(1),
                    customer.percentage.toFixed(1)
                ]);
            });

            // ËΩ¨Êç¢‰∏∫CSVÊ†ºÂºè
            const csvContent = exportData.map(row =>
                row.map(cell => `"${cell}"`).join(',')
            ).join('\n');

            // ÂàõÂª∫‰∏ãËΩΩÈìæÊé•
            const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `ÂÆ¢Êà∑ÂèëË¥ßÊòéÁªÜ_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            this.showNotification('ÂÆ¢Êà∑ÂèëË¥ßÊòéÁªÜÂ∑≤ÂØºÂá∫', 'success');

        } catch (error) {
            console.error('‚ùå ÂØºÂá∫Â§±Ë¥•:', error);
            this.showNotification('ÂØºÂá∫Â§±Ë¥•ÔºåËØ∑ÈáçËØï', 'error');
        }
    }

    // ÂàõÂª∫ÂéÇÂÆ∂ÂèëË¥ßÈáèÂõæË°®
    createManufacturerChart(manufacturers) {
        const canvas = document.getElementById('manufacturerChart');
        if (!canvas || manufacturers.length === 0) return;

        const ctx = canvas.getContext('2d');
        const width = canvas.width;
        const height = canvas.height;

        // Ê∏ÖÁ©∫ÁîªÂ∏É
        ctx.clearRect(0, 0, width, height);

        // ÂèñÂâç8‰∏™ÂéÇÂÆ∂Êï∞ÊçÆ
        const topManufacturers = manufacturers.slice(0, 8);
        const maxValue = Math.max(...topManufacturers.map(m => m.totalMeters));

        // ËÆæÁΩÆÊ†∑Âºè
        ctx.font = '12px Arial';
        ctx.textAlign = 'center';

        // ÁªòÂà∂Êü±Áä∂Âõæ
        const barWidth = (width - 80) / topManufacturers.length;
        const chartHeight = height - 60;

        topManufacturers.forEach((manufacturer, index) => {
            const x = 40 + index * barWidth;
            const barHeight = (manufacturer.totalMeters / maxValue) * chartHeight;
            const y = height - 40 - barHeight;

            // ÁªòÂà∂Êü±Â≠ê
            const gradient = ctx.createLinearGradient(0, y, 0, y + barHeight);
            gradient.addColorStop(0, '#3b82f6');
            gradient.addColorStop(1, '#1d4ed8');

            ctx.fillStyle = gradient;
            ctx.fillRect(x, y, barWidth - 10, barHeight);

            // ÁªòÂà∂Êï∞ÂÄº
            ctx.fillStyle = '#333';
            ctx.fillText(
                manufacturer.totalMeters.toFixed(0),
                x + (barWidth - 10) / 2,
                y - 5
            );

            // ÁªòÂà∂ÂéÇÂÆ∂ÂêçÁß∞ÔºàÊóãËΩ¨Ôºâ
            ctx.save();
            ctx.translate(x + (barWidth - 10) / 2, height - 10);
            ctx.rotate(-Math.PI / 4);
            ctx.textAlign = 'right';
            ctx.fillText(
                manufacturer.name.length > 8 ?
                manufacturer.name.substring(0, 8) + '...' :
                manufacturer.name,
                0, 0
            );
            ctx.restore();
        });

        // ÁªòÂà∂YËΩ¥Ê†áÁ≠æ
        ctx.fillStyle = '#666';
        ctx.textAlign = 'right';
        ctx.fillText('ÂèëË¥ßÈáè(Á±≥)', 35, 20);

        console.log('‚úÖ ÂéÇÂÆ∂ÂèëË¥ßÈáèÂõæË°®ÂàõÂª∫ÂÆåÊàê');
    }

    // Ê∑±Â∫¶Êï∞ÊçÆÂêåÊ≠•‰øÆÂ§ç
    deepDataSync() {
        console.log('üîß ÊâßË°åÊ∑±Â∫¶Êï∞ÊçÆÂêåÊ≠•‰øÆÂ§ç...');

        if (!window.dataManager || !window.dataManager.data) {
            console.log('‚ùå DataManagerÊàñÊï∞ÊçÆ‰∏çÂ≠òÂú®');
            return;
        }

        // Âº∫Âà∂ÈáçÊñ∞Âä†ËΩΩÊú¨Âú∞Êï∞ÊçÆ
        window.dataManager.loadFromLocalStorage();

        setTimeout(() => {
            // ÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°
            this.updateMetricsFromDataManager();

            // È™åËØÅ‰øÆÂ§çÁªìÊûú
            setTimeout(() => {
                const finalMetrics = this.data.totalDemandMeters || 0;
                const dataLength = window.dataManager.data ? window.dataManager.data.length : 0;

                if (dataLength > 0 && finalMetrics > 0) {
                    console.log('‚úÖ Ê∑±Â∫¶ÂêåÊ≠•‰øÆÂ§çÊàêÂäü');
                    this.showNotification('Êï∞ÊçÆÂêåÊ≠•Â∑≤‰øÆÂ§ç', 'success');
                } else {
                    console.log('‚ùå Ê∑±Â∫¶ÂêåÊ≠•‰øÆÂ§çÂ§±Ë¥•');
                    this.showNotification('Êï∞ÊçÆÂêåÊ≠•ÂºÇÂ∏∏ÔºåËØ∑ÊâãÂä®Âà∑Êñ∞', 'warning');
                }
            }, 1000);
        }, 500);
    }
    
    stopAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
        if (this.dataCheckInterval) {
            clearInterval(this.dataCheckInterval);
            this.dataCheckInterval = null;
        }
    }
    
    showNotification(message, type = 'info') {
        // ÂàõÂª∫ÈÄöÁü•ÂÖÉÁ¥†
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // Ê∑ªÂä†Ê†∑Âºè
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '12px 20px',
            borderRadius: '8px',
            color: 'white',
            fontWeight: '500',
            zIndex: '10000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease-in-out',
            backgroundColor: type === 'success' ? '#10b981' : 
                           type === 'error' ? '#ef4444' : '#3b82f6'
        });
        
        document.body.appendChild(notification);
        
        // ÊòæÁ§∫Âä®Áîª
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Ëá™Âä®ÈöêËóè
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }
    
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    // ÂàùÂßãÂåñÂõæË°®ÔºàÂú®charts.js‰∏≠ÂÆûÁé∞Ôºâ
    initializeCharts() {
        if (typeof window.initCharts === 'function') {
            this.charts = window.initCharts();
            // ÂàùÂßãÂåñÂêéÁ´ãÂç≥Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
            setTimeout(() => {
                this.updateCharts();
            }, 200);
        }
    }


    
    // Êõ¥Êñ∞ÂõæË°®ÊñπÊ≥ïÔºà‰ΩøÁî®ÁúüÂÆûÊï∞ÊçÆÔºâ
    updateProductionChart() {
        if (typeof window.updateProductionChart === 'function' && window.dataManager) {
            window.updateProductionChart(this.charts.productionChart, window.dataManager.data);
        }
    }

    updateShippingChart() {
        if (typeof window.updateShippingChart === 'function' && window.dataManager) {
            window.updateShippingChart(this.charts.shippingChart, window.dataManager.data);
        }
    }

    updateSpecChart() {
        if (typeof window.updateSpecChart === 'function' && window.dataManager && this.charts.specChart) {
            window.updateSpecChart(this.charts.specChart, window.dataManager.data);
        }
    }

    updateAreaChart() {
        if (typeof window.updateAreaChart === 'function' && window.dataManager) {
            window.updateAreaChart(this.charts.areaChart, window.dataManager.data);
        }
    }

    // ‰ΩøÁî®Êñ∞Ê®°ÂùóÂåñÊû∂ÊûÑÊõ¥Êñ∞Êï∞ÊçÆ
    updateMetricsFromModules() {
        console.log('=== üÜï ‰ΩøÁî®Ê®°ÂùóÂåñÊû∂ÊûÑÊõ¥Êñ∞Êï∞ÊçÆ ===');

        try {
            // 1. ‰ªéDataCoreËé∑ÂèñÂü∫Á°ÄÁªüËÆ°
            const productionStats = window.dataCore.getProductionStats();
            const shippingStats = window.dataCore.getShippingStats();

            console.log('üìä Áîü‰∫ßÁªüËÆ°:', productionStats);
            console.log('üöö ÂèëË¥ßÁªüËÆ°:', shippingStats);

            // 2. ËÆ°ÁÆóÁ±≥Âà∂Êï∞ÊçÆ
            const totalDemandMeters = this.calculateMetersFromData(window.dataCore.data, 'planned');
            const producedMeters = this.calculateMetersFromData(window.dataCore.data, 'produced');

            // 3. ÂèëË¥ßÈáèËÆ°ÁÆó - ‰ΩøÁî®Â§öÁßçÊï∞ÊçÆÊ∫êÁ°Æ‰øùÂáÜÁ°ÆÊÄß
            let shippedMeters = shippingStats.totalMeters;

            // Â¶ÇÊûúDataCoreÁöÑÂèëË¥ßÁªüËÆ°‰∏∫0ÔºåÂ∞ùËØï‰ªéDataManagerËé∑Âèñ
            if (shippedMeters === 0 && window.dataManager && typeof window.dataManager.calculateCustomerStats === 'function') {
                console.log('üîÑ DataCoreÂèëË¥ßÁªüËÆ°‰∏∫0ÔºåÂ∞ùËØï‰ªéDataManagerËÆ°ÁÆó...');
                try {
                    const customerStats = window.dataManager.calculateCustomerStats();
                    const customerShippedMeters = customerStats.reduce((sum, customer) => {
                        return sum + (customer.totalMeters || 0);
                    }, 0);

                    if (customerShippedMeters > 0) {
                        shippedMeters = customerShippedMeters;
                        console.log(`üì¶ ‰ªéDataManagerÂÆ¢Êà∑ÁªüËÆ°Ëé∑ÂèñÂèëË¥ßÈáè: ${shippedMeters.toFixed(1)}Á±≥`);
                    }
                } catch (error) {
                    console.error('‚ùå DataManagerÂÆ¢Êà∑ÁªüËÆ°ËÆ°ÁÆóÂ§±Ë¥•:', error);
                }
            }

            // Â¶ÇÊûú‰ªçÁÑ∂‰∏∫0Ôºå‰ªéÁîü‰∫ßÊï∞ÊçÆÁöÑshippedÂ≠óÊÆµËÆ°ÁÆó
            if (shippedMeters === 0) {
                console.log('üîÑ Â∞ùËØï‰ªéÁîü‰∫ßÊï∞ÊçÆshippedÂ≠óÊÆµËÆ°ÁÆó...');
                shippedMeters = this.calculateMetersFromData(window.dataCore.data, 'shipped');
                console.log(`üì¶ ‰ªéÁîü‰∫ßÊï∞ÊçÆshippedÂ≠óÊÆµËÆ°ÁÆó: ${shippedMeters.toFixed(1)}Á±≥`);
            }

            // 4. ËÆ°ÁÆóÊ¥æÁîüÊï∞ÊçÆ
            const pendingMeters = Math.max(0, totalDemandMeters - producedMeters);
            const unshippedMeters = Math.max(0, producedMeters - shippedMeters);
            const completionRate = totalDemandMeters > 0 ? (producedMeters / totalDemandMeters * 100) : 0;

            // 5. Êõ¥Êñ∞ÂÜÖÈÉ®Êï∞ÊçÆ
            this.data = {
                ...this.data,
                totalDemandMeters: totalDemandMeters,
                producedMeters: producedMeters,
                pendingMeters: pendingMeters,
                shippedMeters: shippedMeters,
                unshippedMeters: unshippedMeters,
                completionRate: Math.round(completionRate * 10) / 10,
                materialTons: this.calculateMaterialTons(),
                inventoryStatus: this.calculateInventoryStatus(unshippedMeters),
                lastUpdate: new Date()
            };

            console.log('‚úÖ Ê®°ÂùóÂåñÊï∞ÊçÆÊõ¥Êñ∞ÂÆåÊàê:', {
                ÊÄªÈúÄÊ±ÇÈáè: `${totalDemandMeters.toFixed(1)}Á±≥`,
                Â∑≤Áîü‰∫ßÈáè: `${producedMeters.toFixed(1)}Á±≥`,
                ÂæÖÁîü‰∫ßÈáè: `${pendingMeters.toFixed(1)}Á±≥`,
                Â∑≤ÂèëË¥ßÈáè: `${shippedMeters.toFixed(1)}Á±≥`,
                Êú™ÂèëË¥ßÈáè: `${unshippedMeters.toFixed(1)}Á±≥`,
                ÂÆåÊàêÁéá: `${completionRate.toFixed(1)}%`
            });

            // 6. Êõ¥Êñ∞ÁïåÈù¢
            this.updateMetrics();

        } catch (error) {
            console.error('‚ùå Ê®°ÂùóÂåñÊï∞ÊçÆÊõ¥Êñ∞Â§±Ë¥•:', error);
            // ÂõûÈÄÄÂà∞ÂéüÊúâÊñπÊ≥ï
            this.updateMetricsFromDataManagerLegacy();
        }
    }

    // ËÆ°ÁÆóÁ±≥Âà∂Êï∞ÊçÆÁöÑÈÄöÁî®ÊñπÊ≥ï
    calculateMetersFromData(data, field) {
        return data.reduce((sum, item) => {
            const length = this.extractLengthFromSpec(item.spec);
            const quantity = item[field] || 0;
            return sum + (quantity * length / 1000);
        }, 0);
    }

    // ËÆ°ÁÆóÂéüÊùêÊñôÂê®Êï∞
    calculateMaterialTons() {
        if (!window.dataCore || !window.dataCore.materialPurchases) return 0;

        return window.dataCore.materialPurchases.reduce((sum, purchase) => {
            return sum + (purchase.quantity || 0);
        }, 0);
    }

    // ËÆ°ÁÆóÂ∫ìÂ≠òÁä∂ÊÄÅ
    calculateInventoryStatus(unshippedMeters) {
        if (unshippedMeters > 10000) {
            return { status: 'ÂÖÖË∂≥', level: 'high' };
        } else if (unshippedMeters > 5000) {
            return { status: 'Ê≠£Â∏∏', level: 'normal' };
        } else if (unshippedMeters > 1000) {
            return { status: 'ÂÅè‰Ωé', level: 'low' };
        } else {
            return { status: '‰∏çË∂≥', level: 'critical' };
        }
    }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    // Ê≥®ÈáäÊéâÂº∫Âà∂ÂêØÁî®‰∫ëÂêåÊ≠•ÁöÑ‰ª£Á†ÅÔºåÂÖÅËÆ∏Áî®Êà∑Ëá™‰∏ªÈÄâÊã©
    /*
    // Âº∫Âà∂ÂêØÁî®‰∫ëÂêåÊ≠•‰ª•Ëß£ÂÜ≥Êï∞ÊçÆÂêåÊ≠•ÈóÆÈ¢ò
    if (localStorage.getItem('disableFirebase') === 'true') {
        localStorage.removeItem('disableFirebase');
        console.log('Firebase sync was disabled. Re-enabling for data consistency.');
        alert('‰∏∫‰∫ÜËß£ÂÜ≥Â§öÂÆ¢Êà∑Á´ØÊï∞ÊçÆÂêåÊ≠•ÈóÆÈ¢òÔºå‰∫ëÂêåÊ≠•ÂäüËÉΩÂ∑≤Ëá™Âä®ÈáçÊñ∞ÂêØÁî®„ÄÇÈ°µÈù¢Â∞ÜÂà∑Êñ∞‰ª•Â∫îÁî®Êõ¥Êîπ„ÄÇ');
        location.reload();
        return; // ÈáçÊñ∞Âä†ËΩΩÈ°µÈù¢ÔºåÂêéÁª≠‰ª£Á†ÅÊó†ÈúÄÊâßË°å
    }
    */

    console.log('üöÄ ÂàùÂßãÂåñÁ≥ªÁªüÊû∂ÊûÑ...');

    // ÂàùÂßãÂåñÊñ∞ÁöÑÊ®°ÂùóÂåñÊû∂ÊûÑ
    if (typeof DataCore !== 'undefined' &&
        typeof ProductionManager !== 'undefined' &&
        typeof ShippingManager !== 'undefined' &&
        typeof UIController !== 'undefined') {

        console.log('‚úÖ ‰ΩøÁî®Êñ∞ÁöÑÊ®°ÂùóÂåñÊû∂ÊûÑ');

        // ÂàùÂßãÂåñÊ†∏ÂøÉÊ®°Âùó
        window.dataCore = new DataCore();
        window.productionManager = new ProductionManager(window.dataCore);
        window.shippingManager = new ShippingManager(window.dataCore, window.productionManager);
        window.uiController = new UIController(window.dataCore, window.productionManager, window.shippingManager);

        console.log('üéØ Ê®°ÂùóÂåñÊû∂ÊûÑÂàùÂßãÂåñÂÆåÊàê');
    } else {
        console.log('‚ö†Ô∏è Ê®°ÂùóÂåñÊû∂ÊûÑ‰∏çÂÆåÊï¥Ôºå‰ΩøÁî®‰º†ÁªüÊû∂ÊûÑ');
    }

    // ÂàùÂßãÂåñ‰º†ÁªüÊï∞ÊçÆÁÆ°ÁêÜÂô®ÔºàÂÖºÂÆπÂ±ÇÔºâ
    window.dataManager = new DataManager();

    // ÁªëÂÆö‰∫ã‰ª∂
    window.dashboard = new SteelProductionDashboard();

    console.log('‚úÖ Á≥ªÁªüÂàùÂßãÂåñÂÆåÊàê');
});

// È°µÈù¢Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
window.addEventListener('beforeunload', () => {
    if (window.dashboard) {
        window.dashboard.stopAutoRefresh();
    }
});

// ÂÖ®Â±ÄÂáΩÊï∞ÔºöÊòæÁ§∫ÂèëË¥ßÊòéÁªÜ
function showShippingDetails() {
    if (window.dashboard && typeof window.dashboard.openShippingDetailsModal === 'function') {
        window.dashboard.openShippingDetailsModal();
    } else {
        console.error('‚ùå DashboardÊú™ÂàùÂßãÂåñÊàñÊñπÊ≥ï‰∏çÂ≠òÂú®');
    }
}
